{
  "openapi": "3.0.3",
  "x-stoplight": {
    "id": "cz1laytgcchyz"
  },
  "info": {
    "title": "Embedded Payments",
    "description": "Embedding payments into your software platform can be one of the most powerful value drivers for your customers and your top line. Imagine your software delivering the entire order-to-cash cycle including funding right into the customerâ€™s bank account. We provide low code integration- With just a single API, you can go live with Exact Payments. Onboard customers, automated underwriting, receive webhook notifications when your customers is live and ready to take payments. We have all the payment types your customers want and their buyers need. Credit and debit cards plus ACH payments, Apple Pay, Google Pay, Paypal, recurring payments, card-on-file and more. Dive into our API Reference and add embedded payments with Exact today!",
    "version": "1.0.4",
    "contact": {}
  },
  "tags": [
    {
      "name": "API Health Check"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Underwriting Workflow"
    },
    {
      "name": "Merchant Onboarding"
    },
    {
      "name": "Document Management"
    },
    {
      "name": "Account Management"
    },
    {
      "name": "Admin Tools"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Reporting"
    },
    {
      "name": "Webhooks"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Orders",
      "description": "Allows merchants to manage orders in conjunction with Exact.JS."
    }
  ],
  "servers": [
    {
      "url": "https://api.exactpaysandbox.com",
      "description": "Exact Payments Sandbox"
    },
    {
      "url": "https://api-p2.exactpay.com",
      "description": "Exact Payments API"
    }
  ],
  "paths": {
    "/status": {
      "get": {
        "tags": [
          "API Health Check"
        ],
        "summary": "Retrieve Status",
        "description": "A method in which you can check wether or not the Exact Payments service is operational.  Used correctly, this can proactively notify your merchants on the very rare occasion that the Exact Payments service is not operational",
        "responses": {
          "200": {
            "description": "The status of the API.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "operationId": ""
      }
    },
    "/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create Token",
        "description": "Create an authentication token to be able used to create the API call and be successful.  Must be either a User or Application authentification token",
        "requestBody": {
          "description": "The PayFac user credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginTokenCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The token has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "isAuthenticated": true,
                      "type": "user",
                      "token": "string",
                      "expiresAt": "2021-10-05T20:44:01.458Z",
                      "allowedPermissions": [
                        "string"
                      ],
                      "application": "string",
                      "account": "string",
                      "allowedAccounts": [
                        "string"
                      ],
                      "user": "string"
                    }
                  },
                  "properties": {
                    "isAuthenticated": {
                      "type": "boolean"
                    },
                    "type": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "expiresAt": {
                      "type": "string"
                    },
                    "allowedPermissions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PermissionEnum"
                      }
                    },
                    "application": {
                      "type": "string"
                    },
                    "account": {
                      "type": "string"
                    },
                    "allowedAccounts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "user": {
                      "type": "string"
                    },
                    "mode": {
                      "type": "string"
                    },
                    "apiVersion": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "isAuthenticated",
                    "type",
                    "token",
                    "expiresAt",
                    "allowedPermissions",
                    "application",
                    "account",
                    "allowedAccounts",
                    "user",
                    "mode",
                    "apiVersion"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "isAuthenticated": true,
                      "type": "string",
                      "token": "string",
                      "expiresAt": "string",
                      "allowedPermissions": [
                        "string"
                      ],
                      "application": "string",
                      "account": "string",
                      "allowedAccounts": [
                        "string"
                      ],
                      "user": "string",
                      "mode": "string",
                      "apiVersion": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid credentials supplied.\n"
          },
          "403": {
            "description": "Credentials are expired"
          },
          "404": {
            "description": "Cannot find application with specified id"
          },
          "423": {
            "description": "User credentials are locked"
          },
          "428": {
            "description": "User password not set"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "admin-pwa"
            },
            "in": "header",
            "name": "x-application-id",
            "description": "Indicate application calling the API. Can be specified here or in the body"
          }
        ]
      }
    },
    "/application/{applicationId}/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create Application Token",
        "description": "Create a new application token for a non user to access the API under the session account",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created application token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTokenResponse"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "type": "string",
                      "token": "string",
                      "allowedPermissions": [
                        "charges.create"
                      ],
                      "allowedAccounts": [
                        "string"
                      ],
                      "label": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "Application not found"
          }
        }
      },
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Query Application Tokens",
        "description": "Query application tokens for the current session account",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Queried application tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTokenResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "Application not found"
          }
        }
      }
    },
    "/application/{applicationId}/token/{tokenId}": {
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete Application Token",
        "description": "Delete an application tokens from the current session account",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationId"
          }
        ],
        "responses": {
          "204": {
            "description": "Application token deleted"
          },
          "401": {
            "description": "No permission 'application-tokens.delete'"
          },
          "404": {
            "description": "Application not found"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "applicationId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tokenId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/organization/{organizationId}/onboarding-workflow": {
      "post": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "Create Workflow",
        "description": "Create a new underwriting workflow to be associated with an onboarding application.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "requestBody": {
          "description": "It allows a PayFac user to create a new set of rules for the underwriting process.\\\nThe underwriting workflow should contain at least one rule.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnderwritingWorkflowRequest"
              },
              "examples": {
                "All Rules": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestAllRulesExample"
                },
                "Trulioo KYC": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestTruliooKYCExample"
                },
                "Trulioo KYB": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestTruliooKYBExample"
                },
                "Trulioo International Watchlist": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestTruliooInternationalWatchlistExample"
                },
                "OFAC": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestOFACExample"
                },
                "Mastercard Match": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestMastercardMatchExample"
                },
                "Business Information": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestBusinessInformationExample"
                },
                "Plaid Balance": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestPlaidBalanceExample"
                },
                "Plaid Identity": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestPlaidIdentityExample"
                },
                "Plaid Auth": {
                  "$ref": "#/components/examples/UnderwritingWorkflowRequestPlaidAuthExample"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The ID of the underwriting workflow that has been created or updated in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "61523709444c51fa997257fe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\\\nWhen the user has no permissions.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "List Workflows",
        "description": "Retrieve a list of active underwriting workflows associated with your organization.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the active underwriting workflows of the PayFac.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnderwritingWorkflowResponse"
                  }
                }
              }
            },
            "headers": {
              "x-total-count": {
                "schema": {
                  "type": "number"
                },
                "description": "Total items in the list"
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding-workflow/{workflowId}/default": {
      "put": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "Set Default Workflow",
        "description": "Set a specific workflow ID as the default workflow to process for new onboardings.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates that the workflow has been successfully set as the default underwriting workflow."
          },
          "304": {
            "description": "Indicates that the workflow has already been set as the default underwriting workflow."
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen the workflow ID is not valid.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding-workflow/{workflowId}/enable": {
      "put": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "Enable Workflow",
        "description": "Enable a workflow associated with a workflow ID.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates that the workflow has been successfully enabled."
          },
          "304": {
            "description": "Indicates that the workflow has already been enabled."
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen the workflow ID is not valid.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding-workflow/{workflowId}/disable": {
      "put": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "Disable Workflow",
        "description": "Disable a workflow associated with a workflow ID.\nDo not disable default workflow.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates that the workflow has been successfully disabled."
          },
          "304": {
            "description": "Indicates that the workflow has already been disabled."
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen the workflow ID is not valid.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding-workflow/{workflowId}": {
      "put": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "Update Workflow",
        "description": "Update the properties associated with a specific workflow ID.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "requestBody": {
          "description": "It allows a PayFac user to update the underwriting workflow indicated by the ID.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnderwritingWorkflowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Indicates that the workflow has been successfully updated."
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\nWhen the workflow ID is not valid.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "Retrieve Workflow",
        "description": "Retrieve a list of properties associated with a specific workflow ID.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "description": "The underwriting workflow indicated by the ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnderwritingWorkflowResponse"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen the workflow ID is not valid.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Underwriting Workflow"
        ],
        "summary": "Delete Workflow",
        "description": "Delete a workflow associated with a specific workflow ID.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates that the workflow has been successfully deleted."
          },
          "400": {
            "description": "Workflow is default and cannot be deleted"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\nWhen the workflow ID is not valid.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding": {
      "post": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "Create Onboarding",
        "description": "Create a new merchant onboarding application",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "requestBody": {
          "description": "Information needed to request the merchants onboarding into the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The response object that indicates the ID of the onboarding created on the system and its current status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "List Onboardings",
        "description": "Retrieve a list of onboarding applications associated with your user account",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/select"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "The current onboarding application list.",
            "headers": {
              "x-total-count": {
                "description": "Total items on the list",
                "schema": {
                  "type": "integer",
                  "example": 11
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardingResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}": {
      "get": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "Retrieve Onboarding",
        "description": "Retrieve a list of properties associated with a specific merchant onboarding application by ID.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested onboarding application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingResponse"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "Delete Onboarding",
        "description": "Delete a specific merchant onboarding application by ID",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates that the onboarding application has been successfully deleted."
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding request does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/onboarding": {
      "get": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "List Onboardings by Partner",
        "description": "Retrieve a list of onboarding applications associated with your organization",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/select"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "The current onboarding applications list.",
            "headers": {
              "x-total-count": {
                "description": "Total items on the list",
                "schema": {
                  "type": "integer",
                  "example": 11
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardingResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/onboarding/search/{merchantName}": {
      "get": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "Query Onboarding by Partner Name",
        "description": "Retrieve a segmented list of onboarding applications under your organization tha meet the filtered criteria requirements",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/merchantName"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "The current onboarding application list.",
            "headers": {
              "x-total-count": {
                "description": "Total items on the list",
                "schema": {
                  "type": "integer",
                  "example": 2
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardingResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/search/{merchantName}": {
      "get": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "Query Onboarding by Partner",
        "description": "Retrieve a segmented list of onboarding applications under your organization that meet the filtered criteria requirements",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/merchantName"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "The current onboarding application list.",
            "headers": {
              "x-total-count": {
                "description": "Total items on the list",
                "schema": {
                  "type": "integer",
                  "example": 2
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardingResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/filters": {
      "get": {
        "tags": [
          "Merchant Onboarding"
        ],
        "summary": "List Filter Options",
        "description": "Retrieve a list of options that can be used to filter a query of merchant onboarding applications associated with your organization.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "status": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "account": [
                        "57f424bb7e534ff71f6e5626",
                        "6244f1c92158ee2ebae218cc",
                        "62ed3ba4198abaf23bdaf68c",
                        "626056999b87d08c42523ea8",
                        "62434e7b2158ee2ebae20a28",
                        "624208722158ee2ebae20849",
                        "62312cab27f437989a0ee5ae"
                      ],
                      "status": [
                        "inProgress",
                        "errored",
                        "pended",
                        "bankBoarding",
                        "autoApproved"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/note": {
      "post": {
        "tags": [
          "Admin Tools"
        ],
        "summary": "Add Note",
        "description": "Create a new note associated with the merchant onboarding application.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          }
        ],
        "requestBody": {
          "description": "The message that will be used as a note for the onboarding application.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "type": "string",
                    "example": "Note message"
                  }
                },
                "required": [
                  "note"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the complete information of the note created on the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardingNote"
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen the note is not a string.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Admin Tools"
        ],
        "summary": "List Notes",
        "description": "Retrieve a list of notes associated with the merchant onboarding application.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of notes in associated to the onboarding application",
            "headers": {
              "x-total-count": {
                "description": "Total items on the list",
                "schema": {
                  "type": "integer",
                  "example": 3
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardingNote"
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac ser has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/document-request/{documentRequestToken}": {
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Request Document via Token",
        "description": "Create a new documentation request using a authentication token, allowing a merchant to authenticate and upload documentation through a specified link.\n\nUse cases for this would be \n-  Data needed for underwriting\n-  Data needed for Chargeback contestation",
        "operationId": "createDocumentRequestByToken",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/documentRequestToken"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDocumentRequestCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document request created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/document-request": {
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Request Document",
        "description": "Create a new document request to be sent to the merchant for additional verification.",
        "operationId": "createDocumentRequest",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDocumentRequestCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document request created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "List Document Requests",
        "description": "Retrieve a list of document requests associated with a specific merchant onboarding application.",
        "operationId": "getDocumentRequests",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "header",
            "name": "x-total-count",
            "description": "Total items in the list"
          }
        ],
        "responses": {
          "200": {
            "description": "Onboarding Application Document requests list\nReturns a list of all the document requests for an onboarding application that the logged in user has access to, the list is paginated and can be sorted by an specific field.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingDocumentRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document request does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/document-request/{documentRequestId}": {
      "put": {
        "tags": [
          "Document Management"
        ],
        "summary": "Update Document Request",
        "description": "Update a document request associated with a specific document ID.",
        "operationId": "updateDocumentRequest",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/documentRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDocumentRequestCreate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Indicates that the document request has been successfully updated."
          },
          "304": {
            "description": "**Not Modified**\\\nWhen there are errors in the update of the document request\n"
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document request does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Retrieve Document Request",
        "description": "Retrieves a document request for an onboarding application by id",
        "operationId": "getDocumentRequest",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/documentRequestId"
          }
        ],
        "responses": {
          "200": {
            "description": "Onboarding application document request\nReturns a document requests for an onboarding application by a given id that an logged in user has access to.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingDocumentRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document request does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Document Management"
        ],
        "summary": "Delete Document Request",
        "description": "Delete a document request for an onboarding application by id.",
        "operationId": "deleteDocumentRequestById",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/documentRequestId"
          }
        ],
        "responses": {
          "204": {
            "description": "**No content**\\\nIndicates that the document deletion was succeeded.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document request does not exist or has been deleted before.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/document": {
      "post": {
        "tags": [
          "Document Management"
        ],
        "summary": "Upload Document",
        "description": "Upload a document received from a merchant that will be securely retained for your records.",
        "operationId": "uploadDocument",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Uploaded document",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\\\nNo permissions to create or upload a document.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "413": {
            "description": "**Payload too large**\\\nFile is too big.\n"
          },
          "415": {
            "description": "**Invalid File**\\\nUnsupported media type.\\\nThe file is not allowed.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "List Uploaded Documents",
        "description": "List of documents of an specific onboarding application",
        "operationId": "getDocuments",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "A ZIP file with all the documents of an Onboarding",
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            },
            "headers": {
              "x-total-count": {
                "schema": {
                  "type": "number"
                },
                "description": "Total items in the list"
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}": {
      "put": {
        "tags": [
          "Document Management"
        ],
        "summary": "Update Document Type",
        "description": "Update the document type associated with a specific document ID.",
        "operationId": "updateDocumentById",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/documentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatableOnboardingDocument"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated document",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "304": {
            "description": "**Not modified**\\\nWhen there are errors in the update and cannot be processed\n"
          },
          "400": {
            "description": "**Bad Request**\\\nWhen the document type is not provided for update it.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Retrieve Document",
        "description": "Retrieve an uploaded document associated with a specific document ID.",
        "operationId": "getDocumentById",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/documentId"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "A ZIP file with the onboarding document",
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Document Management"
        ],
        "summary": "Delete Document",
        "description": "Delete an uploaded document associated with a specific document ID.",
        "operationId": "deleteDocumentById",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/documentId"
          }
        ],
        "responses": {
          "204": {
            "description": "**No content**\\\nIndicates that the document has been successfully deleted.\n"
          },
          "304": {
            "description": "**Not Modified**\\\nIndicates that the document cannot be deleted.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document does not exist or has been deleted before.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/document/download": {
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Download All Documents",
        "description": "Download all uploaded documents associated with a specific merchant onboarding application.",
        "operationId": "downloadDocuments",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "A ZIP file with all the documents of an Onboarding",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": "merchantName-documents.zip"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\\\nThere is no permission to read the document.\n"
          },
          "404": {
            "description": "**Not Found**\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/document/{documentId}/download": {
      "get": {
        "tags": [
          "Document Management"
        ],
        "summary": "Download Document",
        "description": "Download an uploaded document associated with a specific document ID.",
        "operationId": "downloadDocumentById",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          },
          {
            "$ref": "#/components/parameters/documentId"
          },
          {
            "$ref": "#/components/parameters/isDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "A ZIP file containing the specified document for the onboarding.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": "merchantName-documents.zip"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen that onboarding document does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/retry-rule": {
      "put": {
        "tags": [
          "Admin Tools"
        ],
        "summary": "Process Verification",
        "description": "Manually request an underwriting workflow verification to be performed outside of the initial onboarding workflow.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          }
        ],
        "requestBody": {
          "description": "ruleName is an existing rule name in the workflow assigned to a merchant application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingRetryRuleRequest"
              },
              "examples": {
                "High Risk MCC": {
                  "value": {
                    "ruleName": "High Risk MCC"
                  }
                },
                "Medium Risk Trulioo International WatchList": {
                  "value": {
                    "ruleName": "Medium Risk Trulioo International WatchList"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Indicates that the rule was scheduled to retry successfully"
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\\\nUser without permission\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen that onboarding does not exist or has been deleted.\\\nWhen rule name does not exist in the workflow.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/recheck": {
      "put": {
        "tags": [
          "Admin Tools"
        ],
        "summary": "Process Workflow",
        "description": "Manually request all verifications in an underwriting workflow to be performed outside of the initial onboarding process.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          }
        ],
        "responses": {
          "204": {
            "description": "The re-check request has been received successfully and will be evaluated asynchronously."
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/onboarding/{onboardingId}/status": {
      "put": {
        "tags": [
          "Admin Tools"
        ],
        "summary": "Update Onboarding Status",
        "description": "Manually update the merchant onboarding application status after being automatically determined by the decision engine.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/onboardingId"
          }
        ],
        "requestBody": {
          "description": "The new status and the change reason",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOnboardingStatusRequest"
              },
              "examples": {
                "inProgress": {
                  "value": {
                    "status": "inProgress"
                  }
                },
                "terminated": {
                  "value": {
                    "status": "terminated",
                    "statusChangeReason": "General Risk Concern"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Onboarding status successfully updated"
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\\\nUser without permission\n"
          },
          "403": {
            "description": "**Invalid**\\\nInvalid new status for the current onboarding\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen that onboarding does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/webhook": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook",
        "description": "Create a new webhook and associate a callback URL.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "requestBody": {
          "description": "Fields that compose a webhook definition inside Exact Payments ecosystem.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The response object that indicates the ID of the webhook created in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List Webhooks",
        "description": "Retrieve a list of webhooks created under an organization.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The webhooks list.",
            "headers": {
              "x-total-count": {
                "description": "Total items on the list",
                "schema": {
                  "type": "integer",
                  "example": 5
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/webhook/{webhookId}/enable": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Enable Webhook",
        "description": "Enable a webhook notification to be sent to requestor",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/webhookId"
          }
        ],
        "responses": {
          "204": {
            "description": "**No Content**\\\nIndicates that the webhook has been successfully enabled\n"
          },
          "304": {
            "description": "**Not Modified**\\\nIndicates that the webhook is already enabled\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that webhook does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/webhook/{webhookId}/disable": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Disable Webhook",
        "description": "Disable a webhook notification.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/webhookId"
          }
        ],
        "responses": {
          "204": {
            "description": "**No Content**\\\nIndicates that the webhook has been successfully disabled\n"
          },
          "304": {
            "description": "**Not Modified**\\\nIndicates that the webhook is already disabled\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that webhook does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/webhook/{webhookId}": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook",
        "description": "Update the properties of an existing webhook.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/webhookId"
          }
        ],
        "requestBody": {
          "description": "Fields that are updatable in the webhook definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatableWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Indicates that the webhook has been successfully updated"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that webhook does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve Webhook",
        "description": "Retrieve the details associated with an existing webhook.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/webhookId"
          }
        ],
        "responses": {
          "200": {
            "description": "The full definition of the webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the Webhook does not exist.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete Webhook",
        "description": "Delete a webhook and its associated properties.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/webhookId"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates that the webhook has been successfully deleted."
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\\\nWhen that webhook does not exist or has been deleted.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/report/{domain}": {
      "post": {
        "tags": [
          "Reporting"
        ],
        "summary": "Create Report",
        "description": "Creates a new report query for a selected domain and time period ",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain"
          }
        ],
        "requestBody": {
          "description": "Basic filters to create the report.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Report query created and report data will be generated later. The response object contains the ID and current status of the report query created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**\\\nWhen there are errors in the payload on a business level.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's ID is not valid.\\\nWhen the PayFac user has no permissions to operate on that PayFac.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/report": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "List Reports",
        "description": "Retrieves a list of report queries that a user has previously created.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "The report list.",
            "headers": {
              "x-total-count": {
                "description": "Total items on the list",
                "schema": {
                  "type": "integer",
                  "example": 100
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportQueryResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/report/{id}": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Download Report",
        "description": "Download report query results in JSON or CSV format",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the report query",
            "example": "61a91d429bf82a2d8e95738f",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format of the file that will be downloaded",
            "required": false,
            "example": "csv",
            "schema": {
              "type": "string",
              "default": "json",
              "enum": [
                "csv",
                "json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the report was generated, a stream of JSON file with the report result data, otherwise the JSON report query will be retrieved.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ReportQueryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportQueryResponse"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the Report does not exist.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/account": {
      "get": {
        "tags": [
          "Account Management"
        ],
        "summary": "List Accounts",
        "description": "Retrieve a list of accounts underneath an organization.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "responses": {
          "200": {
            "description": "The accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "_id": "string",
                        "id": "string",
                        "type": "string",
                        "parentAccountId": "string",
                        "name": "string",
                        "dbaName": "string",
                        "isLiveCapable": true,
                        "isDisabled": true,
                        "liveCapableAt": "string",
                        "features": [
                          "string"
                        ],
                        "cascadingFeatures": [
                          "string"
                        ],
                        "createdAt": "string",
                        "updatedAt": "string",
                        "phone": "string",
                        "email": "string",
                        "onlinePresence": "string",
                        "address": {
                          "line1": "MAIN AVENUE 42",
                          "line2": "42-59B Building A",
                          "city": "PHOENIX",
                          "postalCode": 85008,
                          "country": "USA",
                          "countrySubdivision": "AZ"
                        },
                        "disabledAt": "string",
                        "disabledByUser": "string",
                        "defaultMerchantId": "string",
                        "defaultTerminalId": "string",
                        "defaultTerminalGatewayId": "string",
                        "ach": {
                          "customer": "string"
                        }
                      }
                    ]
                  }
                }
              }
            },
            "headers": {
              "x-total-count": {
                "schema": {
                  "type": "string"
                },
                "description": "Total items in the list"
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the Account does not exist.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/organization/{organizationId}/account/search": {
      "get": {
        "tags": [
          "Account Management"
        ],
        "summary": "Query Accounts",
        "description": "Retrieve a segmented list of merchant accounts under a parent organization that meet the filtered criteria requirements.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "Search text on name, dbaName, phone, email and onlinePresence fields"
          }
        ],
        "responses": {
          "200": {
            "description": "The accounts found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            },
            "headers": {
              "x-total-count": {
                "schema": {
                  "type": "number"
                },
                "description": "Total items in the list"
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's account does not exist.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizationId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/organization/{organizationId}/account/{accountId}": {
      "get": {
        "tags": [
          "Account Management"
        ],
        "summary": "Retrieve Account by ID",
        "description": "Retrieve a list of properties associated with a specific merchant account by ID.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "The merchant's account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's account does not exist.\\\nWhen the merchant's account does not exist.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      },
      "put": {
        "tags": [
          "Account Management"
        ],
        "summary": "Update Account by ID",
        "description": "Update a specific merchant account by ID.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "description": "Fields that are required in the request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "**No Content**\\\nIndicates that the merchant's account was updated successfully.\n"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "**Bad Request**\\\nIndicates that the data present in the body of the request is not correct.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the PayFac's account does not exist.\\\nWhen the merchant's account does not exist.\n"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/account/{accountId}/payment-method": {
      "post": {
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Create Payment Method for a given account",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "operationId": "account-post-payment-method",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "type": "card",
                      "token": "string",
                      "billingDetails": {
                        "name": "string",
                        "email": "string",
                        "phone": "string",
                        "address": {
                          "line1": "string",
                          "line2": "string",
                          "city": "string",
                          "state": "string",
                          "country": "string",
                          "postalCode": "string"
                        }
                      },
                      "card": {
                        "expiry": {
                          "month": 0,
                          "year": 0
                        },
                        "brand": "string",
                        "lastFour": "string",
                        "checks": {
                          "cvcCheck": true,
                          "addressCheck": true
                        },
                        "tokenType": "gateway"
                      },
                      "createdAt": "string",
                      "updatedAt": "string"
                    }
                  },
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "billingDetails": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "address": {
                          "type": "object",
                          "properties": {
                            "line1": {
                              "type": "string"
                            },
                            "line2": {
                              "type": "string"
                            },
                            "city": {
                              "type": "string"
                            },
                            "state": {
                              "type": "string"
                            },
                            "country": {
                              "type": "string"
                            },
                            "postalCode": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "card": {
                      "type": "object",
                      "properties": {
                        "expiry": {
                          "type": "object",
                          "properties": {
                            "month": {
                              "type": "integer"
                            },
                            "year": {
                              "type": "integer"
                            }
                          }
                        },
                        "brand": {
                          "type": "string"
                        },
                        "lastFour": {
                          "type": "string"
                        },
                        "checks": {
                          "type": "object",
                          "properties": {
                            "cvcCheck": {
                              "type": "boolean"
                            },
                            "addressCheck": {
                              "type": "boolean"
                            }
                          }
                        },
                        "tokenType": {
                          "type": "string"
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "isDefault": {
                      "type": "string"
                    },
                    "ach": {
                      "type": "object",
                      "properties": {
                        "bankAccountType": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "type": "string",
                      "token": "string",
                      "billingDetails": {
                        "name": "string",
                        "email": "string",
                        "phone": "string",
                        "address": {
                          "line1": "string",
                          "line2": "string",
                          "city": "string",
                          "state": "string",
                          "country": "string",
                          "postalCode": "string"
                        }
                      },
                      "card": {
                        "expiry": {
                          "month": 0,
                          "year": 0
                        },
                        "brand": "string",
                        "lastFour": "string",
                        "checks": {
                          "cvcCheck": true,
                          "addressCheck": true
                        },
                        "tokenType": "string"
                      },
                      "createdAt": "string",
                      "updatedAt": "string",
                      "label": "string",
                      "isDefault": "string",
                      "ach": {
                        "bankAccountType": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The encoded bundle was malformed.\nCheck ach is enabled, email is present, data is well formed."
          },
          "401": {
            "description": "Unauthorized. Do not have permission \"charges.create\"."
          },
          "402": {
            "description": "Network tokens feature not enabled"
          },
          "404": {
            "description": "Account Not Found"
          },
          "406": {
            "description": "Payment method rejected"
          },
          "428": {
            "description": "The encoded key was not recognized"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Failed to create payment method. Please try again later"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentMethod"
              }
            }
          },
          "description": "Country code must be in CAPS"
        },
        "description": "API that is used when a partner or organization creates a payment token (Payment method) on behalf of a specific merchant(accountID). Please note that the Organization(partner) needs to provide the partner or org authentication token.\n\nNote that if you are storing card information the field `card.tokenType` can be set to various values which control where the card data will be stored. `gateway` means that Exact Payments will store the card, and this is of no additional charge. `network` means that the card will be stored with a card network provider, and as an added benefit will be updated should the card be renewed or meta data for the card changes. In order to use `network` as the card token type, this feature must be enabled on your account.\n\nIf you are storing ACH related account information, then you need to  provide such information using a Plaid processor token and the data will be stored on the `gateway`"
      }
    },
    "/payment-method": {
      "post": {
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Create Payment Method",
        "operationId": "post-payment-method",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentMethod"
          },
          "400": {
            "description": "The encoded bundle was malformed.\nCheck ach is enabled, email is present, data is well formed."
          },
          "401": {
            "description": "Unauthorized. Do not have permission \"charges.create\"."
          },
          "402": {
            "description": "Network tokens feature not enabled"
          },
          "404": {
            "description": "Not Found"
          },
          "406": {
            "description": "Payment method rejected"
          },
          "428": {
            "description": "The encoded key was not recognized"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Failed to create payment method. Please try again later"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentMethod"
              }
            }
          }
        },
        "description": "API that is used when a Merchant creates a payment token (Payment method).\n\nNote that if you are storing card information the field `card.tokenType` can be set to various values which control where the card data will be stored. `gateway` means that Exact Payments will store the card, and this is of no additional charge. `network` means that the card will be stored with a card network provider, and as an added benefit will be updated should the card be renewed or meta data for the card changes. In order to use `network` as the card token type, this feature must be enabled on your account.\n\nIf you are storing ACH related account information, then you need to  provide such information using a Plaid processor token and the data will be stored on the `gateway`"
      }
    },
    "/account/{accountId}/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "summary": "Create Order specifying an account",
        "description": "Create an order, needs to specify which account the order will belong to.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/order_response"
          },
          "400": {
            "$ref": "#/components/responses/error_400"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Order",
        "description": "Create an order.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/order_response"
          },
          "400": {
            "$ref": "#/components/responses/error_400"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List Orders",
        "description": "List all orders for API key's account, paginated and optionally restricted to a date range. Date range must be no more than six months.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/skip"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/from"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/order_search"
          },
          "400": {
            "$ref": "#/components/responses/error_400"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      }
    },
    "/account/{accountId}/orders/{orderId}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update Order specifying an account",
        "description": "Update details of an existing order, needs to specify which account the order belongs to.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/order_response"
          },
          "400": {
            "$ref": "#/components/responses/error_400"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order Details",
        "description": "Get details of a specific order.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/order_response"
          },
          "400": {
            "$ref": "#/components/responses/error_400"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update Order",
        "description": "Update details of an existing order.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/order_response"
          },
          "400": {
            "$ref": "#/components/responses/error_400"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      }
    },
    "/orders/{orderId}/accessToken": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create New Access Token",
        "description": "Create a new access token for this order. This will invalidate any existing access tokens.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/order_access_token"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      }
    },
    "/orders/{orderId}/reset": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Reset Payment Attempts",
        "description": "Reset failed payment attempts count to zero for this order.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/order_response"
          },
          "403": {
            "$ref": "#/components/responses/error_403"
          },
          "default": {
            "$ref": "#/components/responses/error_generic"
          }
        }
      }
    },
    "/account/{accountId}/payment-method/{tokenId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a tokenized payment method for a given account",
        "description": "API to retrieve a tokenized payment method of a specific merchant(accountID) by an organization. Please note that the Organization(partner) needs to provide the partner or org authentication token.\n\nNote that you can perform a lookup of the customer ID indicating the customer token in the parameter.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/tokenId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LookupNPaymentMethod"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid authentication token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\nWhen the specified token does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Payments"
        ],
        "summary": "Delete a tokenized payment method for a given account",
        "description": "Delete a tokenized payment method",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/tokenId"
          }
        ],
        "responses": {
          "204": {
            "description": "**No Content**\\\nIndicates that the token was successfully deleted.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid authentication token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\nWhen the specified token does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/payment-method/{tokenId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a tokenized payment method",
        "description": "API to retrieve a tokenized payment method by the merchant\n\nNote that you can perform a lookup of the customer ID indicating the customer token in the parameter.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tokenId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LookupNPaymentMethod"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid authentication token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the specified token does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      },
      "delete": {
        "tags": [
          "Payments"
        ],
        "summary": "Delete a tokenized payment method",
        "description": "Delete a tokenized payment method",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tokenId"
          }
        ],
        "responses": {
          "204": {
            "description": "**No Content**\\\nIndicates that the token was successfully deleted.\n"
          },
          "401": {
            "description": "**Unauthorized**\\\nInvalid authentication token supplied.\n"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the specified token does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/account/{accountId}/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/skip"
          }
        ],
        "summary": "Get Payments for a given account",
        "operationId": "account-get-payments",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payments"
          },
          "401": {
            "description": "Unauthorized. Need permission 'charges.create'"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\n"
          }
        },
        "description": "API for an organization to fetch a list of merchant(accountID) specific completed transactions by a specific character string. Please note that the Organization(partner) needs to provide the partner or org authentication token. "
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "summary": "Create Payment for a given account",
        "operationId": "account-post-payments",
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "description": "Payment method not found or Payment validation failed"
          },
          "401": {
            "description": "Unauthorized. Need permission 'charges.create'"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "In order to create a payment, the following endpoint can be used.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get Payments",
        "operationId": "get-payments",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payments"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized. Do not have permission \"charges.create\"."
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "API for the merchant to fetch a list of completed transactions by a specific character string.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/skip"
          }
        ]
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Create Payment",
        "operationId": "post-payments",
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          }
        },
        "description": "In order to create a payment, the following endpoint can be used.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPayment"
              }
            }
          }
        }
      }
    },
    "/account/{accountId}/payments/{paymentId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get details of a specific payment for a given account",
        "description": "API for an organization to retrieve a list of properties associated with a specific payment transaction at by a merchant(accountID). Please note that the Organization(partner) needs to provide the partner or org authentication token.",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\nWhen the specified payment does not exist.\n"
          },
          "default": {
            "$ref": "#/components/responses/Failure"
          }
        }
      }
    },
    "/payments/{paymentId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get details of a specific payment",
        "description": "API for a merchant to retrieve a list of properties associated with a specific payment transaction ",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the specified payment does not exist.\n"
          },
          "default": {
            "$ref": "#/components/responses/Failure"
          }
        }
      }
    },
    "/account/{accountId}/payments/{paymentId}/capture": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Capture an existing pre-authorization for a given account",
        "description": "API for an Organization to capture an existing pre-authorization by a merchant (accountID). Note that ACH transactions are not able to be captured as they do not support pre-authorization. Please note that the Organization(partner) needs to provide the partner or org authentication token.\n\nCapture completes the transaction so that it can be funded.  Captures can be for less, same or more than the original Authorization",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferencedPayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\nWhen the specified payment does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/payments/{paymentId}/capture": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Capture an existing pre-authorization",
        "description": "API for a Merchant to capture an existing pre-authorization. Note that ACH transactions are not able to be captured as they do not support pre-authorization. \n\nCapture completes the transaction so that it can be funded.  Captures can be for less, same or more than the original Authorization",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferencedPayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the specified payment does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/account/{accountId}/payments/{paymentId}/refund": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refund a specific payment for a given account",
        "description": "API for an Organization to Refund a specific payment for a merchant(accountID). Note that ACH transactions are not refundable.  Please note that the Organization(partner) needs to provide the partner or org authentication token.\n\nRefunds typically happen after a batch closes and refunds a partial or whole amount of the transaction. ",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferencedPayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          },
          "304": {
            "$ref": "#/components/responses/Failure"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\nWhen the specified payment does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/payments/{paymentId}/refund": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refund a specific payment",
        "description": "API for an Merchant to Refund a specific payment. Note that ACH transactions are not refundable.  Refunds typically happen after a batch closes and refunds a partial or whole amount of the transaction",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferencedPayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          },
          "304": {
            "$ref": "#/components/responses/Failure"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the specified payment does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/account/{accountId}/payments/{paymentId}/void": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Void a specific payment for a given account",
        "description": "API for an Organization to Void a specific payment for a merchant(accountID). Please note that the Organization(partner) needs to provide the partner or org authentication token.  \n\nNote that ACH transactions are not voidable.  Voids typically happen before a batch closes and removes the transaction from the batch",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferencedPayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          },
          "304": {
            "$ref": "#/components/responses/Failure"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the merchant's account does not exist.\nWhen the specified payment does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/payments/{paymentId}/void": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Void a specific payment",
        "description": "API for an Merchant to Void a specific payment. Note that ACH transactions are not voidable.  Voids typically happen before a batch closes and removes the transaction from the batch",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paymentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferencedPayment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Payment"
          },
          "304": {
            "$ref": "#/components/responses/Failure"
          },
          "400": {
            "$ref": "#/components/responses/Failure"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "**Not Found**\\\nWhen the specified payment does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/account/{accountId}/customer": {
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Query customers for a given account (Partner context)",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "postalCode": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          },
                          "isDefault": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "id": "string",
                      "name": "string",
                      "email": "string",
                      "phone": "string",
                      "token": "string",
                      "addresses": [
                        {
                          "label": "string",
                          "city": "string",
                          "country": "string",
                          "line1": "string",
                          "line2": "string",
                          "postalCode": "string",
                          "state": "string",
                          "isDefault": true
                        }
                      ],
                      "createdAt": "string",
                      "updatedAt": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "string",
                      "name": "string",
                      "email": "string",
                      "phone": "string",
                      "token": "string",
                      "addresses": [
                        {
                          "label": "string",
                          "city": "string",
                          "country": "string",
                          "line1": "string",
                          "line2": "string",
                          "postalCode": "string",
                          "state": "string",
                          "isDefault": true
                        }
                      ],
                      "createdAt": "string",
                      "updatedAt": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "account-get-customer",
        "description": "This API returns the list of customers under a given merchant. It is meant to be invoked by a Organization(partner) to fetch the list of all customers for a given merchant(accountId) in the request URI.  Please note that the Organization(partner) needs to provide the partner or org authentication token. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "$limit",
            "description": "Sets the number of documents to return, and defaults to 100. It has a maximum of 1000."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "$skip",
            "description": "Sets the number of documents to skip."
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "summary": "Create Customer for a given account",
        "operationId": "account-post-customer",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "postalCode": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          },
                          "isDefault": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "id": "string",
                      "name": "string",
                      "email": "string",
                      "phone": "string",
                      "token": "string",
                      "addresses": [
                        {
                          "label": "string",
                          "city": "string",
                          "country": "string",
                          "line1": "string",
                          "line2": "string",
                          "postalCode": "string",
                          "state": "string",
                          "isDefault": true
                        }
                      ],
                      "createdAt": "string",
                      "updatedAt": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "In order to create a customer API consumers can issue a call to the following endpoint. Note that as mentioned at the start of the document, an account id can be provided in the path.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomer"
              }
            }
          }
        }
      }
    },
    "/customer": {
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Query customers for a given account (Sub-merchant context)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "postalCode": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          },
                          "isDefault": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "id": "string",
                      "name": "string",
                      "email": "string",
                      "phone": "string",
                      "token": "string",
                      "addresses": [
                        {
                          "label": "string",
                          "city": "string",
                          "country": "string",
                          "line1": "string",
                          "line2": "string",
                          "postalCode": "string",
                          "state": "string",
                          "isDefault": true
                        }
                      ],
                      "createdAt": "string",
                      "updatedAt": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "string",
                      "name": "string",
                      "email": "string",
                      "phone": "string",
                      "token": "string",
                      "addresses": [
                        {
                          "label": "string",
                          "city": "string",
                          "country": "string",
                          "line1": "string",
                          "line2": "string",
                          "postalCode": "string",
                          "state": "string",
                          "isDefault": true
                        }
                      ],
                      "createdAt": "string",
                      "updatedAt": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "get-customer",
        "description": "This API returns the list of customers for a given merchant. It is meant to be invoked by a merchant to fetch the list of their own customers. Please note that there is no need to provide the (accountId) in the request URI, since the merchant needs to provide the account token to limit the scope for their own account",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "$limit",
            "description": "Sets the number of documents to return, and defaults to 100. It has a maximum of 1000."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "$skip",
            "description": "Sets the number of documents to skip."
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Create Customer",
        "operationId": "post-customer",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "In order to create a customer API consumers can issue a call to the following endpoint. Note that as mentioned at the start of the document, an account id can be provided in the path.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomer"
              }
            }
          }
        }
      }
    },
    "/account/{accountId}/customer/{customerId}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get Customer by ID for a given account",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/customerId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          },
          "504": {
            "description": "Gateway Timeout"
          }
        },
        "operationId": "account-get-customer-:id",
        "description": "For fetching singular customer objects API consumers can issue a call to the following endpoint. If the id provided in the path exists it will be returned in the response body. It is meant to be invoked by a Organization(partner) for a given merchant(accountId) in the request URI.  Please note that the Organization(partner) needs to provide the partner or org authentication token. "
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Update Customer by ID for a given account",
        "operationId": "account-put-customer-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/customerId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "It is necessary for API consumers to update customer details from time to time. This can be achieved with the following call.\nNote that the body can contain a subset of MongoDB update operators for more fine grain control. See https://www.mongodb.com/docs/manual/reference/operator/update/ for reference.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomer"
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Delete Customer by ID for a given account",
        "operationId": "account-delete-customer-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/customerId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "On occasion it is necessary for an API consumer to delete customers. The following call supports this use case."
      }
    },
    "/customer/{customerId}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get Customer by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "string",
                      "name": "string",
                      "email": "string",
                      "phone": "string",
                      "token": "string",
                      "addresses": [
                        {
                          "label": "string",
                          "city": "string",
                          "country": "string",
                          "line1": "string",
                          "line2": "string",
                          "postalCode": "string",
                          "state": "string",
                          "isDefault": true
                        }
                      ],
                      "createdAt": "string",
                      "updatedAt": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "get-customer-:id",
        "description": "For fetching singular customer objects API consumers can issue a call to the following endpoint. If the id provided in the path exists it will be returned in the response body. Please note that there is no need to provide the (accountId) in the request URI, since the merchant needs to provide the account token to limit the scope for their own account"
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Update Customer by ID",
        "operationId": "put-customer-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "It is necessary for API consumers to update customer details from time to time. This can be achieved with the following call.\nNote that the body can contain a subset of MongoDB update operators for more fine grain control. See https://www.mongodb.com/docs/manual/reference/operator/update/ for reference.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomer"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Delete Customer by ID",
        "operationId": "delete-customer-id",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "On occasion it is necessary for an API consumer to delete customers. The following call supports this use case."
      }
    },
    "/account/{accountId}/customer/{customerId}/payment-method": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accountId"
        },
        {
          "$ref": "#/components/parameters/customerId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Query Payment Methods for Customer for a given account",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "account-get-customer-id-payment-method",
        "description": "To query payment methods associated with a customer the following call can be used. Note that because card information is encrypted, query string filtering is not supported. That said $limit and $skip can still be used for pagination.  It is meant to be invoked by a Organization(partner) for a given merchant(accountId) in the request URI.  Please note that the Organization(partner) needs to provide the partner or org authentication token. ",
        "parameters": []
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Attach Payment Method for a Customer (Partner context)",
        "operationId": "account-post-customer-id-payment-method",
        "responses": {
          "201": {
            "$ref": "#/components/responses/PaymentMethod"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized. Need permission 'charges.create'"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "This API associates a payment method with a customer. It is meant to be invoked by a partner to associate the payment method for specific customer  under a specific sub-merchant as identified by the {customer Id} and {accountId) parameters in the request URI. Please note that the partner needs to provide the partner or org authentication token when making this API call. Please note that the payment method is represented by a token returned earlier as a response to the POST method of the resource endpoint: /account/{accountId}/payment-method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        }
      }
    },
    "/account/{accountId}/customer-token/{customerToken}/payment-method": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accountId"
        },
        {
          "$ref": "#/components/parameters/customerToken"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Query Payment Methods for Customer by customer token for a given account",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "account-get-customer-token-payment-method",
        "description": "This route takes the customer token instead of an id to enable users to list  payment methods associated with a customer when they do not have the customer's id. Please note that there is no need to provide the (accountId) in the request URI, since the merchant needs to provide the account token to limit the scope for their own account",
        "parameters": []
      }
    },
    "/customer-token/{customerToken}/payment-method": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerToken"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Query Payment Methods for Customer by customer token",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentMethods"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "get-customer-token-payment-method",
        "description": "This route takes the customer token instead of an id to enable users to list  payment methods associated with a customer when they do not have the customer's id.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "$limit",
            "description": "Sets the number of documents to return, and defaults to 100. It has a maximum of 1000."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "$skip",
            "description": "Sets the number of documents to skip."
          }
        ]
      }
    },
    "/customer/{customerId}/payment-method": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Query Payment Methods for Customer",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "get-customer-id-payment-method",
        "description": "To query payment methods associated with a customer the following call can be used. Note that because card information is encrypted, query string filtering is not supported. That said $limit and $skip can still be used for pagination.",
        "parameters": []
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Attach Payment Method for a Customer (Sub-merchant context)",
        "operationId": "post-customer-id-payment-method",
        "responses": {
          "201": {
            "$ref": "#/components/responses/PaymentMethod"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized. Need permission 'charges.create'"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "This API associates a payment method with a customer. It is meant to be invoked by a sub-merchant to associate the payment method for a specific customer as identified by the {customer Id} parameter in the request URI. Please note that the sub-merchant needs to provide the account authentication token when making this API call. Please note that the payment method in the request is represented by a token returned earlier as a response to the POST method of the resource endpoint: /payment-method",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/account/{accountId}/customer/{customerId}/payment-method/{tokenId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accountId"
        },
        {
          "$ref": "#/components/parameters/customerId"
        },
        {
          "$ref": "#/components/parameters/tokenId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get Payment Method Associated with Customer by Token for a given account",
        "operationId": "account-get-customer-customerId-payment-method-token",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentMethod"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "To retrieve a payment method as well as ensure it is associated with a customer. The following call can be used.  It is meant to be invoked by a Organization(partner) for a given merchant(accountId) in the request URI.  Please note that the Organization(partner) needs to provide the partner or org authentication token. "
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Delete Payment Method Associated with Customer by Token for a given account",
        "operationId": "account-delete-customer-customerId-payment-method-token",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "In order to unlink a payment method from a customer, the following call can be made."
      }
    },
    "/customer/{customerId}/payment-method/{tokenId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerId"
        },
        {
          "$ref": "#/components/parameters/tokenId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get Payment Method Associated with Customer by Token",
        "operationId": "get-customer-customerId-payment-method-token",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentMethod"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "To retrieve a payment method as well as ensure it is associated with a customer. The following call can be used.  Please note that there is no need to provide the (accountId) in the request URI, since the merchant needs to provide the account token to limit the scope for their own account"
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Delete Payment Method Associated with Customer by Token",
        "operationId": "delete-customer-customerId-payment-method-token",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "In order to unlink a payment method from a customer, the following call can be made."
      }
    },
    "/account/{accountId}/customer/{customerId}/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accountId"
        },
        {
          "$ref": "#/components/parameters/customerId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get Customer Payments for a given account",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payments"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "account-get-customer-customerId-payments",
        "description": "In order to fetch payments performed by a customer, the following endpoint can be called. It is meant to be invoked by a Organization(partner) for a given merchant(accountId) in the request URI.  Please note that the Organization(partner) needs to provide the partner or org authentication token.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/skip"
          }
        ]
      }
    },
    "/customer/{customerId}/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get Customer Payments",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payments"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "operationId": "get-customer-customerId-payments",
        "description": "In order to fetch payments performed by a customer, the following endpoint can be called. Please note that there is no need to provide the (accountId) in the request URI, since the merchant needs to provide the account token to limit the scope for their own account",
        "parameters": [
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/skip"
          }
        ]
      }
    }
  },
  "components": {
    "responses": {
      "error_generic": {
        "description": "Unspecified error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "messages": {
                  "type": "array",
                  "maxItems": 50,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "payment_search": {
        "description": "List of payments.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment_search"
            }
          }
        }
      },
      "error_400": {
        "description": "**Bad Request**\\\nWhen there are errors in the payload\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "messages": {
                  "type": "array",
                  "maxItems": 50,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "error_403": {
        "description": "**Access Denied**\\\nCredentials supplied do not grant access to the requested resource.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "messages": {
                  "type": "array",
                  "maxItems": 50,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "payment": {
        "description": "Payment was created.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment_response"
            }
          }
        }
      },
      "payment_detail": {
        "description": "Details of a single payment.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment_detail"
            }
          }
        }
      },
      "token": {
        "description": "Token was created.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/token_response"
            }
          }
        }
      },
      "order_search": {
        "description": "Details of an existing orders.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/order_search"
            }
          }
        }
      },
      "order_response": {
        "description": "Order created.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/order_response"
            }
          }
        }
      },
      "order_access_token": {
        "description": "New order access token created.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/order_access_token"
            }
          }
        }
      },
      "account_search": {
        "description": "List of existing accounts.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/account_search"
            }
          }
        }
      },
      "account_details": {
        "description": "Details of an existing account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/account_details"
            }
          }
        }
      },
      "merchant_search": {
        "description": "List of an account's existing merchants.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/merchant_search"
            }
          }
        }
      },
      "merchant_details": {
        "description": "Details of an existing merchant.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/merchant_details"
            }
          }
        }
      },
      "terminal_search": {
        "description": "List of a merchant's existing terminals.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/terminal_search"
            }
          }
        }
      },
      "terminal_details": {
        "description": "Details of an existing terminal.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/terminal_details"
            }
          }
        }
      },
      "user_search": {
        "description": "List of an account's existing admin users.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/user_search"
            }
          }
        }
      },
      "user_details": {
        "description": "Details of an existing merchant admin user.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/user_details"
            }
          }
        }
      },
      "Failure": {
        "description": "Problems with the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RequestFailure"
            }
          }
        }
      },
      "ServerError": {
        "description": "**Internal Server Error**\n"
      },
      "ServiceUnavailable": {
        "description": "**Service Unavailable**\n"
      },
      "Token": {
        "description": "Token created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TokenResponse"
            }
          }
        }
      },
      "Customer": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "Customers": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          }
        },
        "headers": {
          "X-Total-Count": {
            "schema": {
              "type": "string"
            },
            "description": "The total count of customers matching the query"
          }
        }
      },
      "PaymentMethod": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        }
      },
      "LookupNPaymentMethod": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LookupNPaymentMethod"
            },
            "examples": {
              "example-1": {
                "value": {
                  "type": "string",
                  "token": "string",
                  "billingDetails": {
                    "name": "string",
                    "email": "string",
                    "phone": "string",
                    "address": {
                      "line1": "string",
                      "line2": "string",
                      "city": "string",
                      "state": "string",
                      "country": "string",
                      "postalCode": "string"
                    }
                  },
                  "card": {
                    "expiry": {
                      "month": 0,
                      "year": 0
                    },
                    "brand": "string",
                    "lastFour": "string",
                    "checks": {
                      "cvcCheck": true,
                      "addressCheck": true
                    },
                    "tokenType": "string"
                  },
                  "createdAt": "string",
                  "updatedAt": "string",
                  "label": "string",
                  "isDefault": "string",
                  "ach": {
                    "bankAccountType": "string"
                  }
                }
              }
            }
          }
        }
      },
      "PaymentMethods": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            }
          }
        },
        "headers": {
          "X-Total-Count": {
            "schema": {
              "type": "string"
            },
            "description": "The total count of customers matching the query"
          }
        }
      },
      "Payments": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          }
        },
        "headers": {
          "x-total-count": {
            "schema": {
              "type": "number"
            },
            "description": "Total items in the list"
          }
        }
      },
      "Payment": {
        "description": "Example response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      }
    },
    "parameters": {
      "applicationId": {
        "name": "applicationId",
        "in": "path",
        "description": "The Application ID",
        "required": true,
        "example": "my-application",
        "schema": {
          "type": "string"
        }
      },
      "accountId": {
        "name": "accountId",
        "in": "path",
        "description": "The Account ID",
        "required": true,
        "example": "6151ffdbefd963001c6c9d2d",
        "schema": {
          "type": "string"
        }
      },
      "paymentId": {
        "name": "paymentId",
        "in": "path",
        "required": true,
        "example": "62d831a97a3bf768f9e15b68",
        "schema": {
          "type": "string"
        }
      },
      "customerId": {
        "name": "customerId",
        "in": "path",
        "required": true,
        "example": "62d9be95cb27b92e42c9b0c0",
        "schema": {
          "type": "string"
        }
      },
      "customerToken": {
        "name": "customerToken",
        "in": "path",
        "required": true,
        "example": "62d9be95cb27b92e42c9b0c1",
        "schema": {
          "type": "string"
        }
      },
      "documentId": {
        "name": "documentId",
        "in": "path",
        "description": "The onboarding application document definition Id",
        "required": true,
        "example": "61e8607bd569a196900527c5",
        "schema": {
          "type": "string"
        }
      },
      "documentRequestId": {
        "name": "documentRequestId",
        "in": "path",
        "description": "The onboarding application document request definition Id",
        "required": true,
        "example": "61e8607bd569a196900527c5",
        "schema": {
          "type": "string"
        }
      },
      "documentRequestToken": {
        "name": "documentRequestToken",
        "in": "path",
        "description": "The onboarding application document request definition Token",
        "required": true,
        "example": "0420d6ea199d4a540e2b1e58c2068fa790ac780178d4cce346c7fbe22c8d599daab5bbbe617b566d0de6ac6e34a6b663a28e67ee0a07528624708d633729a0e808518a12f28e9ead398bbd21ba4c6f2a",
        "schema": {
          "type": "string"
        }
      },
      "domain": {
        "name": "domain",
        "in": "path",
        "description": "The domain of the report to be generated.",
        "required": true,
        "examples": {
          "account": {
            "value": "account",
            "summary": "Account Domain Report"
          },
          "chargeback": {
            "value": "chargeback",
            "summary": "Chargeback Domain Report"
          },
          "transaction": {
            "value": "transaction",
            "summary": "Transaction Domain Report"
          }
        },
        "schema": {
          "type": "string",
          "enum": [
            "account",
            "chargeback",
            "transaction"
          ]
        }
      },
      "inviteToken": {
        "name": "inviteToken",
        "in": "path",
        "description": "The security token associated to an user invite.",
        "required": true,
        "example": "OPSGpcU5opIQdcogO_zKPQ",
        "schema": {
          "type": "string"
        }
      },
      "isDeleted": {
        "name": "isDeleted",
        "in": "query",
        "description": "Indicates whether to bring the deleted onboarding applications or not. If not sent it will bring just the currently active onboarding applications in the system.",
        "required": false,
        "schema": {
          "type": "boolean",
          "example": false
        }
      },
      "limit": {
        "name": "$limit",
        "in": "query",
        "description": "The maximum number of items to retrieve within the current page of results.",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 10
        }
      },
      "to": {
        "name": "to",
        "in": "query",
        "description": "Datetime to limit the search to, in ISO8601 format. Defaults to today",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2022-12-31T00:00:00.000Z"
        }
      },
      "from": {
        "name": "from",
        "in": "query",
        "description": "Datetime to start the search from, in ISO8601 format. Defaults to one month ago. Maximum seach window is 6 months.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2022-01-01T00:00:00.000Z"
        }
      },
      "orderId": {
        "name": "orderId",
        "in": "path",
        "description": "The order Id",
        "required": true,
        "example": "55c42605-e4e7-4e0c-801a-4ba7eff1925b",
        "schema": {
          "type": "string"
        }
      },
      "merchantName": {
        "name": "merchantName",
        "in": "path",
        "description": "The text to match with the merchants name",
        "required": true,
        "schema": {
          "type": "string",
          "example": "Bait"
        }
      },
      "onboardingId": {
        "name": "onboardingId",
        "in": "path",
        "description": "The onboarding application Id",
        "required": true,
        "example": "6154ce01387b94001cd87ada",
        "schema": {
          "type": "string"
        }
      },
      "organizationId": {
        "name": "organizationId",
        "in": "path",
        "description": "The PayFac ID",
        "required": true,
        "example": "6151ffdbefd963001c6c9d2d",
        "schema": {
          "type": "string"
        }
      },
      "partnerId": {
        "name": "partnerId",
        "in": "path",
        "description": "The partner ID",
        "required": true,
        "example": "6151ffdbefd963001c6c9d2d",
        "schema": {
          "type": "string"
        }
      },
      "searchText": {
        "name": "searchText",
        "in": "path",
        "description": "Text to be used to filter",
        "required": true,
        "schema": {
          "type": "string",
          "example": "Your text"
        }
      },
      "select": {
        "name": "$select",
        "in": "query",
        "description": "Allows a user to select the specific fields that want to be retrieved for the response object, it is a comma separated list of fields and the possible values will depend on the specific schema that is being queried.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "createdAt,status,merchant.name"
        }
      },
      "skip": {
        "name": "$skip",
        "in": "query",
        "description": "The zero-based offset to start at. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests.",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 0
        }
      },
      "sort": {
        "name": "$sort",
        "in": "query",
        "description": "Sets the sort order If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "-name"
        }
      },
      "tokenId": {
        "name": "tokenId",
        "in": "path",
        "description": "Payment token Id",
        "required": true,
        "example": "9085c19f-88e9-4fbf-93cf-5ceec221146c",
        "schema": {
          "type": "string"
        }
      },
      "type": {
        "name": "type",
        "in": "path",
        "description": "The type of account or organization",
        "required": true,
        "examples": {
          "account": {
            "value": "account",
            "summary": "Account type"
          },
          "organization": {
            "value": "organization",
            "summary": "Organization type"
          }
        },
        "schema": {
          "type": "string"
        }
      },
      "userId": {
        "name": "userId",
        "in": "path",
        "required": true,
        "description": "The user ID",
        "example": "61e0a48da415705515574da1",
        "schema": {
          "type": "string"
        }
      },
      "webhookId": {
        "name": "webhookId",
        "in": "path",
        "description": "The customers webhook definition Id",
        "required": true,
        "example": "61e8607bd569a196900527c5",
        "schema": {
          "type": "string"
        }
      },
      "workflowId": {
        "name": "workflowId",
        "in": "path",
        "description": "The workflow id",
        "required": true,
        "example": "61f2e8593a0a3076d01a71ef",
        "schema": {
          "type": "string"
        }
      },
      "x-total-count": {
        "name": "x-total-count",
        "in": "header",
        "required": false,
        "schema": {
          "type": "number"
        },
        "description": "Total items in the list"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "credit_card_details": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cardholder": {
            "type": "string"
          },
          "last4": {
            "type": "string",
            "description": "The last 4 digits of the supplied credit card."
          },
          "expiry_month": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "maximum": 12
          },
          "expiry_year": {
            "type": "integer",
            "format": "uint32"
          },
          "card_brand": {
            "type": "string",
            "description": "The brand of the credit card, lowercase."
          },
          "avs_check": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "code": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "The response code from any AVS check which was done."
              },
              "description": {
                "type": "string",
                "description": "a description of the check which was done."
              }
            }
          },
          "cvd_check": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "code": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "The response code from any check on the CVD code."
              },
              "description": {
                "type": "string",
                "description": "a description of the check which was done."
              }
            }
          }
        }
      },
      "token_details": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The token value."
          },
          "token_type": {
            "type": "string",
            "enum": [
              "exactpay",
              "processor"
            ]
          },
          "card_brand": {
            "type": "string",
            "description": "The brand of the tokenized credit card, lowercase."
          },
          "cardholder": {
            "type": "string"
          },
          "last4": {
            "type": "string",
            "description": "The last 4 digits of the card which was tokenized."
          },
          "expiry_month": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "maximum": 12
          },
          "expiry_year": {
            "type": "integer",
            "format": "uint32"
          },
          "cvd_check": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "code": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "The response code from any check on the CVD code."
              },
              "description": {
                "type": "string",
                "description": "a description of the check which was done."
              }
            }
          }
        }
      },
      "payment_detail": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "settled": {
            "type": "boolean",
            "description": "Whether the payment has been settled."
          },
          "settled_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the payment settled, in ISO8601 format."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the payment was created in UTC, in ISO8601 format."
          },
          "payment_id": {
            "type": "string",
            "description": "A unique identifier for this payment, if it was sent to the bank."
          },
          "authorization": {
            "type": "string",
            "description": "The authorization code for this payment, if it was approved."
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "The amount which was approved."
          },
          "fee_amount": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of any fee which was charged."
          },
          "surcharge_amount": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of any surcharge which was charged."
          },
          "currency_code": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "The ISO currency code of the currency in which the payment was created."
          },
          "sent_to_bank": {
            "type": "boolean",
            "description": "Whether or not the payment was submitted to the bank for processing."
          },
          "captured": {
            "type": "boolean",
            "description": "Whether the amount was captured, or authorized."
          },
          "capture_details": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "list": {
                "type": "array",
                "maxItems": 50,
                "description": "List of URLs to retrieve details of any capture transactions.",
                "items": {
                  "type": "string"
                }
              },
              "remaining": {
                "type": "integer",
                "format": "int32",
                "description": "Any remaining balance which could still be captured."
              }
            }
          },
          "refunded": {
            "type": "boolean",
            "description": "Whether the amount was refunded."
          },
          "refund_details": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "list": {
                "type": "array",
                "maxItems": 10,
                "description": "List of URLs to retrieve details of any refund transactions.",
                "items": {
                  "type": "string"
                }
              },
              "remaining": {
                "type": "integer",
                "format": "int32",
                "description": "Any remaining balance which could still be refunded."
              }
            }
          },
          "voided": {
            "type": "boolean",
            "description": "Whether the amount was captured, or authorized."
          },
          "void_details": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "list": {
                "type": "array",
                "maxItems": 10,
                "description": "List of URLs to retrieve details of any void transactions.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "bank_response": {
            "type": "object",
            "additionalProperties": false,
            "description": "Details of the response from the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "100"
              },
              "message": {
                "type": "string",
                "example": "Approved"
              }
            }
          },
          "exact_response": {
            "type": "object",
            "additionalProperties": false,
            "description": "Details of why a transaction was not submitted to the bank. Will not be present if transaction was sent to the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "26"
              },
              "message": {
                "type": "string",
                "example": "Invalid Card Number"
              }
            }
          },
          "payment_method_details": {
            "type": "object",
            "additionalProperties": false,
            "oneOf": [
              {
                "$ref": "#/components/schemas/credit_card_details"
              },
              {
                "$ref": "#/components/schemas/token_details"
              }
            ]
          },
          "options": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "order_tracking_number": {
                "type": "string"
              },
              "fraud_suspected": {
                "type": "string"
              },
              "ecommerce_flag": {
                "type": "string"
              },
              "third_party_id": {
                "type": "string"
              },
              "special_payment": {
                "type": "string"
              },
              "aft_transfer_type": {
                "type": "string"
              },
              "amex_fraud": {
                "type": "string"
              },
              "split_shipment_number": {
                "type": "string"
              },
              "par": {
                "type": "string",
                "description": "The Payment Account Reference assigned the card by the issuer. Elavon only."
              }
            }
          }
        }
      },
      "payment_search": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of payments available."
          },
          "results": {
            "type": "array",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/payment_detail"
            }
          }
        }
      },
      "manual_card_data": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "cardholder",
          "number",
          "expiry_month",
          "expiry_year"
        ],
        "properties": {
          "cardholder": {
            "type": "string",
            "minLength": 3,
            "maxLength": 30
          },
          "number": {
            "type": "string",
            "pattern": "^\\d{14,16}$"
          },
          "expiry_month": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "maximum": 12
          },
          "expiry_year": {
            "type": "integer",
            "format": "uint32",
            "minimum": 2000
          },
          "cvd": {
            "type": "string",
            "pattern": "^\\d{3,4}$"
          },
          "cvd_indicator": {
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              9
            ],
            "description": "Null or 0 = Not Supported (Default), 1 = Value provided by Cardholder, 2 = Value provided on card is Illegible, 9 = Cardholder states data is not available"
          }
        }
      },
      "track1_data": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "track1"
        ],
        "properties": {
          "track1": {
            "type": "string",
            "pattern": "^%?B[0-9 ]{1,19}\\^[ a-zA-Z,.\\/]{2,26}\\^[0-9]*\\??$"
          }
        }
      },
      "track2_data": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "cardholder",
          "track2"
        ],
        "properties": {
          "cardholder": {
            "type": "string"
          },
          "track2": {
            "type": "string",
            "pattern": "^;?[0-9 ]{1,19}=[0-9]*\\??$"
          }
        }
      },
      "credit_card": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "credit_card": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/manual_card_data"
              },
              {
                "$ref": "#/components/schemas/track1_data"
              },
              {
                "$ref": "#/components/schemas/track2_data"
              }
            ]
          }
        }
      },
      "apple_pay": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "apple_pay": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "number",
              "expiry_month",
              "expiry_year",
              "transaction_id",
              "cryptogram"
            ],
            "properties": {
              "cardholder": {
                "type": "string"
              },
              "number": {
                "type": "string",
                "pattern": "^\\d{14,19}$"
              },
              "expiry_month": {
                "type": "integer",
                "format": "uint32",
                "minimum": 1,
                "maximum": 12
              },
              "expiry_year": {
                "type": "integer",
                "format": "uint32",
                "minimum": 2000
              },
              "transaction_id": {
                "type": "string",
                "description": "The transaction ID returned by Apple Pay."
              },
              "cryptogram": {
                "type": "string",
                "description": "The cryptogram returned by Apple Pay. Note: if the response from Apple contains an `eciIndicator` value, you MUST pass this value to us using the `ecommerce_flag` attribute in the `options` request element."
              }
            }
          }
        }
      },
      "google_pay": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "google_pay": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "properties": {
              "number": {
                "type": "string",
                "pattern": "^\\d{14,19}$"
              },
              "expiry_month": {
                "type": "integer",
                "format": "uint32",
                "minimum": 1,
                "maximum": 12
              },
              "expiry_year": {
                "type": "integer",
                "format": "uint32",
                "minimum": 2000
              },
              "cvd": {
                "type": "string",
                "pattern": "^\\d{3,4}$",
                "description": "Not normally returned by Google Pay, but should be included if present in the Google Pay response."
              },
              "cryptogram": {
                "type": "string",
                "description": "The cryptogram for tokenized cards. MUST be supplied if returned by Google Pay."
              }
            }
          }
        }
      },
      "paypal": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "paypal": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "payer_id",
              "success"
            ],
            "properties": {
              "payer_id": {
                "type": "string"
              },
              "gross_amount_currency_id": {
                "type": "string",
                "description": "The gross_amount_currency_id value from the PayPal response."
              },
              "success": {
                "type": "boolean",
                "description": "Whether or not the payment succeeded at PayPal."
              },
              "authorization": {
                "type": "string",
                "description": "The authorization from the PayPal response."
              },
              "message": {
                "type": "string",
                "description": "The message from the PayPal response."
              },
              "correlation_id": {
                "type": "string",
                "description": "The correlation ID from the PayPal response."
              },
              "timestamp": {
                "type": "string",
                "description": "The timestamp value from the PayPal response."
              },
              "code": {
                "type": "string",
                "description": "Any error code from the PayPal response."
              },
              "order": {
                "type": "boolean",
                "description": "Indicates whether or not the transaction performed in PayPal was an order rather than an authorization. See PayPal's documentation for the difference between the two and ensure you set this flag appropriately as a PayPal Order supports a different set of follow-up transactions than a PayPal Authorization. Defaults to false."
              }
            }
          }
        }
      },
      "token": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "token",
              "token_type"
            ],
            "properties": {
              "token": {
                "type": "string"
              },
              "token_type": {
                "type": "string",
                "enum": [
                  "exactpay",
                  "processor"
                ]
              },
              "card_brand": {
                "type": "string",
                "description": "The brand name of the card which was tokenized, lowercase. REQUIRED with processor tokens."
              },
              "cardholder": {
                "type": "string"
              },
              "expiry_month": {
                "type": "integer",
                "format": "uint32",
                "minimum": 1,
                "maximum": 12,
                "description": "REQUIRED with processor tokens."
              },
              "expiry_year": {
                "type": "integer",
                "format": "uint32",
                "minimum": 2000,
                "description": "REQUIRED with processor tokens."
              },
              "cvd": {
                "type": "string",
                "pattern": "^\\d{3,4}$"
              },
              "cvd_indicator": {
                "type": "integer",
                "enum": [
                  0,
                  1,
                  2,
                  9
                ],
                "description": "Null or 0 = Not Supported (Default), 1 = Value provided by Cardholder, 2 = Value provided on card is Illegible, 9 = Cardholder states data is not available"
              }
            }
          }
        }
      },
      "debit_bill_pay": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "debit_bill_pay": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "cardholder",
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "properties": {
              "cardholder": {
                "type": "string",
                "minLength": 3,
                "maxLength": 30
              },
              "number": {
                "type": "string",
                "pattern": "^\\d{14,19}$"
              },
              "expiry_month": {
                "type": "integer",
                "format": "uint32",
                "minimum": 1,
                "maximum": 12
              },
              "expiry_year": {
                "type": "integer",
                "format": "uint32",
                "minimum": 2000
              },
              "cvd": {
                "type": "string",
                "pattern": "^\\d{3,4}$"
              },
              "cvd_indicator": {
                "type": "integer",
                "enum": [
                  0,
                  1,
                  2,
                  9
                ],
                "description": "Null or 0 = Not Supported (Default), 1 = Value provided by Cardholder, 2 = Value provided on card is Illegible, 9 = Cardholder states data is not available"
              }
            }
          }
        }
      },
      "payment_method": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/credit_card"
          },
          {
            "$ref": "#/components/schemas/apple_pay"
          },
          {
            "$ref": "#/components/schemas/google_pay"
          },
          {
            "$ref": "#/components/schemas/paypal"
          },
          {
            "$ref": "#/components/schemas/token"
          },
          {
            "$ref": "#/components/schemas/debit_bill_pay"
          }
        ]
      },
      "billing_address": {
        "description": "The customer's billing address. Will be used for AVS checks so postal/zip code is the minimum data required.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "postalCode"
        ],
        "properties": {
          "line1": {
            "type": "string",
            "maxLength": 30
          },
          "line2": {
            "type": "string",
            "maxLength": 28
          },
          "city": {
            "type": "string",
            "maxLength": 20
          },
          "state": {
            "type": "string",
            "maxLength": 2
          },
          "postalCode": {
            "type": "string",
            "maxLength": 10
          },
          "countryCode": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "3-character alphabetical country code according to ISO 3166-1, eg: USA, CAN etc."
          }
        }
      },
      "customer": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "maxLength": 20
          },
          "phoneType": {
            "type": "string",
            "enum": [
              "H",
              "W",
              "N",
              "D"
            ],
            "description": "H = Home, W = Work, D = Day, N = Night. Phone type is required when a phone number is supplied."
          },
          "address": {
            "$ref": "#/components/schemas/billing_address"
          }
        }
      },
      "reference": {
        "description": "Merchant defined values which can be used to internally identify the transaction.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "customerRef": {
            "type": "string",
            "maxLength": 20
          },
          "referenceNo": {
            "type": "string",
            "maxLength": 20
          },
          "reference3": {
            "type": "string",
            "maxLength": 30
          },
          "correlationId": {
            "type": "string",
            "maxLength": 60,
            "description": "A merchant defined value that can be used to reverse a transaction which times out without returning a payment id."
          }
        }
      },
      "stored_credentials": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "indicator": {
            "type": "string"
          },
          "initiation": {
            "type": "string"
          },
          "schedule": {
            "type": "string"
          },
          "payment_id": {
            "type": "string"
          },
          "protectbuy_indicator": {
            "type": "string"
          },
          "original_amount": {
            "type": "integer",
            "format": "uint32",
            "description": "In smallest currency units, eg: cents in USD"
          }
        }
      },
      "soft_descriptor": {
        "description": "Override business information which would normally appear on a customer's statement, making it easier for customers to identify transactions.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "dbaName": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string",
            "description": "3-character alphabetical country code according to ISO 3166-1, eg: USA, CAN etc.",
            "pattern": "/^[A-Z]{3}$/"
          },
          "mcc": {
            "type": "string"
          },
          "merchantContactInfo": {
            "type": "string"
          },
          "authTypeIndicator": {
            "type": "string",
            "format": "/\\A[AF]/z/",
            "description": "F = Final Amount (amount is not expected to change for settlement). P = Pre-Authorization / Estimated Amount (amount may change between auth and settlement). Elavon only"
          },
          "taxId": {
            "type": "string",
            "description": "The Tax Identifier of the merchant. Elavon only"
          },
          "mvvMaid": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "submerchantId": {
            "type": "string"
          }
        }
      },
      "ship_to": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "customerNumber": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/customer"
          }
        ]
      },
      "line_item": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "description",
          "quantity",
          "unitCost",
          "lineItemTotal"
        ],
        "properties": {
          "commodityCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discountAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "discountIndicator": {
            "type": "boolean"
          },
          "grossNetIndicator": {
            "type": "boolean"
          },
          "lineItemTotal": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "productCode": {
            "type": "string",
            "maxLength": 12
          },
          "quantity": {
            "type": "integer",
            "format": "float",
            "description": "If present, must be greater than zero"
          },
          "taxAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "taxRate": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "taxType": {
            "type": "string"
          },
          "unitCost": {
            "type": "integer",
            "format": "float",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD so 13.25 = 13 and one quarter cents"
          },
          "unitOfMeasure": {
            "type": "string"
          }
        }
      },
      "level3": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "taxAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "taxRate": {
            "type": "number",
            "format": "float",
            "minimum": 0
          },
          "altTaxAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "altTaxId": {
            "type": "string"
          },
          "dutyAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "freightAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "discountAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "description": "In smallest currency units, eg: cents in USD"
          },
          "shipFromZip": {
            "type": "string",
            "maxLength": 10
          },
          "shipTo": {
            "$ref": "#/components/schemas/ship_to"
          },
          "lineItems": {
            "type": "array",
            "minItems": 1,
            "maxItems": 98,
            "items": {
              "$ref": "#/components/schemas/line_item"
            }
          }
        }
      },
      "three_d_secure": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "program_protocol": {
            "type": "integer",
            "enum": [
              1,
              2
            ]
          },
          "directory_server_transaction_id": {
            "type": "string"
          },
          "cavv": {
            "type": "string"
          },
          "xid": {
            "type": "string"
          }
        }
      },
      "options": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "order_tracking_number": {
            "type": "string"
          },
          "fraud_suspected": {
            "type": "string"
          },
          "ecommerce_flag": {
            "type": "string",
            "description": "Used to classify the style of transaction being performed. 2 = Recurring, 3 = Installment.",
            "maxLength": 1,
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "R",
              "I",
              "X"
            ]
          },
          "third_party_id": {
            "type": "string",
            "description": "If you are a Third-Party Processor, this can be used to include your ID when processing."
          },
          "installment_number": {
            "type": "string",
            "format": "xx/yy",
            "description": "The current number for an installment payment, followed by the total number of installments. Example: 01/03"
          },
          "split_shipment_number": {
            "type": "string",
            "format": "xx/yy",
            "description": "Split Shipment feature is required whenever the same authorization code is being used for multiple transactions entries. The total number of shipments must be greater than 1. Example: 01/03"
          },
          "special_payment": {
            "type": "string",
            "description": "Set to \"B\" to indicate transaction should be processed as a special payment. Only relevant to Visa credit transactions."
          },
          "aft_transfer_type": {
            "type": "string",
            "enum": [
              "AA",
              "BI",
              "PP",
              "TU",
              "WT"
            ],
            "description": "Visa Non Original Credit Account Funding Transaction (NON-OCT AFT) transfer type."
          },
          "customer_ip": {
            "type": "string",
            "format": "ipv4"
          },
          "generate_receipt": {
            "type": "boolean",
            "description": "Whether we should generate a receipt for the customer. Defaults to false."
          }
        }
      },
      "payment": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "amount",
          "terminal",
          "payment_method"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "Amount in smallest currency unit, eg: cents, including all fees, surcharges, taxes etc."
          },
          "fee_amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount."
          },
          "surcharge_amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount. (Available for Elavon processing only)"
          },
          "tax_amount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "Level 2 tax value included in total amount. Sales tax in the US, or PST for Canadian merchants. In smallest currency units, eg: cents in USD. This is assumed to already be included in the amount."
          },
          "capture": {
            "type": "boolean",
            "description": "Set this to false if you only want to authorize for the amount. Defaults to true."
          },
          "terminal": {
            "type": "object",
            "additionalProperties": false,
            "description": "Which terminal to process the transaction through. Terminal determines currency and language.",
            "required": [
              "gateway_id"
            ],
            "properties": {
              "gateway_id": {
                "type": "string",
                "maxLength": 10
              }
            }
          },
          "payment_method": {
            "$ref": "#/components/schemas/payment_method"
          },
          "customer": {
            "$ref": "#/components/schemas/customer"
          },
          "reference": {
            "$ref": "#/components/schemas/reference"
          },
          "stored_credentials": {
            "$ref": "#/components/schemas/stored_credentials"
          },
          "soft_descriptor": {
            "$ref": "#/components/schemas/soft_descriptor"
          },
          "level_3": {
            "$ref": "#/components/schemas/level3"
          },
          "three_d_secure": {
            "$ref": "#/components/schemas/three_d_secure"
          },
          "options": {
            "$ref": "#/components/schemas/options"
          }
        }
      },
      "payment_response": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "captured": {
            "type": "boolean",
            "description": "Whether the amount was captured, or authorized."
          },
          "payment_id": {
            "type": "string",
            "description": "A unique identifier for this payment, if it was sent to the bank."
          },
          "authorization": {
            "type": "string",
            "description": "The authorization code for this payment, if it was approved."
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "The amount which was approved."
          },
          "fee_amount": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of any fee which was charged."
          },
          "surcharge_amount": {
            "type": "integer",
            "format": "int32",
            "description": "The amount of any surcharge which was charged."
          },
          "currency_code": {
            "type": "string",
            "pattern": "^[A-Z]{3}$",
            "description": "The ISO currency code of the currency in which the payment was created."
          },
          "sent_to_bank": {
            "type": "boolean",
            "description": "Whether or not the payment was submitted to the bank for processing."
          },
          "bank_response": {
            "type": "object",
            "additionalProperties": false,
            "description": "Details of the response from the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "100"
              },
              "message": {
                "type": "string",
                "example": "Approved"
              }
            }
          },
          "exact_response": {
            "type": "object",
            "additionalProperties": false,
            "description": "Details of why a transaction was not submitted to the bank. Will not be present if transaction was sent to the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "26"
              },
              "message": {
                "type": "string",
                "example": "Invalid Card Number"
              }
            }
          },
          "terminal": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "gateway_id": {
                "type": "string",
                "description": "Which terminal the payment was processed on."
              }
            }
          },
          "merchant": {
            "type": "object",
            "additionalProperties": false,
            "description": "Details of the merchant who processed the payment.",
            "properties": {
              "name": {
                "type": "string",
                "example": "Frank's Widget Store"
              },
              "address": {
                "$ref": "#/components/schemas/billing_address"
              },
              "url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "receipt": {
            "type": "string",
            "description": "The receipt for this payment, if it was sent to the bank."
          },
          "payment_method_details": {
            "type": "object",
            "additionalProperties": false,
            "oneOf": [
              {
                "$ref": "#/components/schemas/credit_card_details"
              },
              {
                "$ref": "#/components/schemas/token_details"
              }
            ]
          },
          "options": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "order_tracking_number": {
                "type": "string"
              },
              "fraud_suspected": {
                "type": "string"
              },
              "ecommerce_flag": {
                "type": "string"
              },
              "third_party_id": {
                "type": "string"
              },
              "special_payment": {
                "type": "string"
              },
              "aft_transfer_type": {
                "type": "string"
              },
              "amex_fraud": {
                "type": "string"
              },
              "split_shipment_number": {
                "type": "string"
              },
              "par": {
                "type": "string",
                "description": "The Payment Account Reference number, if available. Elavon only."
              }
            }
          }
        }
      },
      "tagged_payment": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "amount",
          "terminal",
          "authorization"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "Amount in smallest currency unit, eg: cents, including all surcharges, taxes etc."
          },
          "fee_amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount."
          },
          "surcharge_amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount. (Available for Elavon processing only)"
          },
          "authorization": {
            "type": "string",
            "description": "The authorization value for the payment you are operating on."
          },
          "terminal": {
            "type": "object",
            "additionalProperties": false,
            "description": "Which terminal to process the transaction through. Terminal determines currency and language.",
            "required": [
              "gateway_id"
            ],
            "properties": {
              "gateway_id": {
                "type": "string"
              }
            }
          },
          "reference": {
            "$ref": "#/components/schemas/reference"
          },
          "soft_descriptor": {
            "$ref": "#/components/schemas/soft_descriptor"
          },
          "options": {
            "$ref": "#/components/schemas/options"
          }
        }
      },
      "referenced_payment": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "amount",
          "terminal",
          "authorization",
          "payment_method"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "Amount in smallest currency unit, eg: cents, including all surcharges, taxes etc."
          },
          "fee_amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount."
          },
          "surcharge_amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount. (Available for Elavon processing only)"
          },
          "tax_amount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "Tax value included in total amount. Sales tax in the US, or PST for Canadian merchants. In smallest currency units, eg: cents in USD. This is assumed to already be included in the amount."
          },
          "authorization": {
            "type": "string",
            "description": "The authorization value for the payment you are operating on."
          },
          "terminal": {
            "type": "object",
            "additionalProperties": false,
            "description": "Which terminal to process the transaction through. Terminal determines currency and language.",
            "required": [
              "gateway_id"
            ],
            "properties": {
              "gateway_id": {
                "type": "string"
              }
            }
          },
          "payment_method": {
            "$ref": "#/components/schemas/payment_method"
          },
          "customer": {
            "$ref": "#/components/schemas/customer"
          },
          "reference": {
            "$ref": "#/components/schemas/reference"
          },
          "soft_descriptor": {
            "$ref": "#/components/schemas/soft_descriptor"
          },
          "options": {
            "$ref": "#/components/schemas/options"
          }
        }
      },
      "token_request": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "terminal",
          "payment_method"
        ],
        "properties": {
          "terminal": {
            "type": "object",
            "description": "Which terminal to process the transaction through. The terminal determines currency and language.",
            "additionalProperties": false,
            "required": [
              "gateway_id"
            ],
            "properties": {
              "gateway_id": {
                "type": "string"
              }
            }
          },
          "payment_method": {
            "$ref": "#/components/schemas/credit_card"
          },
          "language": {
            "type": "string",
            "enum": [
              "en",
              "es"
            ],
            "description": "Will be used to translate error messages."
          }
        }
      },
      "token_response": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "sent_to_bank": {
            "type": "boolean",
            "description": "Whether or not the payment details were submitted to the bank for authorization."
          },
          "bank_response": {
            "type": "object",
            "additionalProperties": false,
            "description": "Details of the response from the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "100"
              },
              "message": {
                "type": "string",
                "example": "Approved"
              }
            }
          },
          "exact_response": {
            "type": "object",
            "additionalProperties": false,
            "description": "Details of why the payment details were not submitted to the bank. Will not be present if payment details were sent to the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "26"
              },
              "message": {
                "type": "string",
                "example": "Invalid Card Number"
              }
            }
          },
          "terminal": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "gateway_id": {
                "type": "string",
                "description": "Which terminal the token was generated on."
              }
            }
          },
          "token_details": {
            "$ref": "#/components/schemas/token_details"
          }
        }
      },
      "order_access_token": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/order_access_token_detail"
          }
        }
      },
      "order_access_token_detail": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The token which grants temporary API access to ExactJS."
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this access token expires, in ISO8601 format."
          }
        }
      },
      "order_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "accessToken": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "expires_at": {
                "type": "string"
              }
            }
          },
          "paymentId": {
            "type": "string"
          },
          "amount": {
            "type": "integer"
          },
          "feeAmount": {
            "type": "integer"
          },
          "surchargeAmount": {
            "type": "integer"
          },
          "taxAmount": {
            "type": "integer"
          },
          "capture": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "terminal": {
            "type": "object",
            "properties": {
              "gatewayId": {
                "type": "string"
              }
            }
          },
          "reference": {
            "type": "object",
            "properties": {
              "customerRef": {
                "type": "string"
              },
              "referenceNo": {
                "type": "string"
              },
              "reference3": {
                "type": "string"
              },
              "correlationId": {
                "type": "string"
              }
            }
          },
          "billing": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "phoneType": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "countryCode": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "softDescriptor": {
            "type": "object",
            "properties": {
              "dbaName": {
                "type": "string"
              },
              "street": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              },
              "countryCode": {
                "type": "string"
              },
              "mcc": {
                "type": "string"
              },
              "merchantContactInfo": {
                "type": "string"
              }
            }
          },
          "level3": {
            "type": "object",
            "properties": {
              "taxAmount": {
                "type": "integer"
              },
              "taxRate": {
                "type": "integer"
              },
              "altTaxAmount": {
                "type": "integer"
              },
              "altTaxId": {
                "type": "string"
              },
              "dutyAmount": {
                "type": "integer"
              },
              "freightAmount": {
                "type": "integer"
              },
              "discountAmount": {
                "type": "integer"
              },
              "shipFromZip": {
                "type": "string"
              },
              "shipTo": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "phoneType": {
                    "type": "string"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string"
                      },
                      "line2": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "countryCode": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "lineItems": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "commodityCode": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "discountAmount": {
                      "type": "integer"
                    },
                    "discountIndicator": {
                      "type": "boolean"
                    },
                    "grossNetIndicator": {
                      "type": "boolean"
                    },
                    "lineItemTotal": {
                      "type": "integer"
                    },
                    "product_code": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "integer"
                    },
                    "taxAmount": {
                      "type": "integer"
                    },
                    "taxRate": {
                      "type": "integer"
                    },
                    "taxType": {
                      "type": "string"
                    },
                    "unitCost": {
                      "type": "integer"
                    },
                    "unitOfMeasure": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "options": {
            "type": "object",
            "properties": {
              "orderTrackingNumber": {
                "type": "string"
              },
              "ecommerceFlag": {
                "type": "string"
              },
              "customerIp": {
                "type": "string"
              }
            }
          }
        },
        "x-examples": {
          "Example 1": {
            "id": "string",
            "status": "awaiting_payment",
            "accessToken": {
              "token": "string",
              "expires_at": "2022-12-20T21:53:38.369Z"
            },
            "paymentId": "string",
            "amount": 0,
            "feeAmount": 0,
            "surchargeAmount": 0,
            "taxAmount": 0,
            "capture": true,
            "description": "string",
            "terminal": {
              "gatewayId": "string"
            },
            "reference": {
              "customerRef": "string",
              "referenceNo": "string",
              "reference3": "string",
              "correlationId": "string"
            },
            "billing": {
              "name": "string",
              "email": "user@example.com",
              "phone": "string",
              "phoneType": "H",
              "address": {
                "line1": "string",
                "line2": "string",
                "city": "string",
                "state": "string",
                "postalCode": "string",
                "countryCode": "string"
              }
            },
            "softDescriptor": {
              "dbaName": "string",
              "street": "string",
              "city": "string",
              "state": "string",
              "postalCode": "string",
              "countryCode": "string",
              "mcc": "string",
              "merchantContactInfo": "string"
            },
            "level3": {
              "taxAmount": 0,
              "taxRate": 0,
              "altTaxAmount": 0,
              "altTaxId": "string",
              "dutyAmount": 0,
              "freightAmount": 0,
              "discountAmount": 0,
              "shipFromZip": "string",
              "shipTo": {
                "name": "string",
                "email": "user@example.com",
                "phone": "string",
                "phoneType": "H",
                "address": {
                  "line1": "string",
                  "line2": "string",
                  "city": "string",
                  "state": "string",
                  "postalCode": "string",
                  "countryCode": "string"
                }
              },
              "lineItems": [
                {
                  "commodityCode": "string",
                  "description": "string",
                  "discountAmount": 0,
                  "discountIndicator": true,
                  "grossNetIndicator": true,
                  "lineItemTotal": 0,
                  "product_code": "string",
                  "quantity": 0,
                  "taxAmount": 0,
                  "taxRate": 0,
                  "taxType": "string",
                  "unitCost": 0,
                  "unitOfMeasure": "string"
                }
              ]
            },
            "options": {
              "orderTrackingNumber": "string",
              "ecommerceFlag": "1",
              "customerIp": "198.51.100.42"
            }
          }
        }
      },
      "order_search": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of orders available."
          },
          "results": {
            "type": "array",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/order_response"
            }
          }
        }
      },
      "order_options": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderTrackingNumber": {
            "type": "string"
          },
          "ecommerceFlag": {
            "type": "string",
            "description": "Used to classify the style of transaction being performed. 2 = Recurring, 3 = Installment.",
            "maxLength": 1,
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "R",
              "I",
              "X"
            ]
          },
          "customerIp": {
            "type": "string",
            "format": "ipv4"
          }
        }
      },
      "order": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "amount",
          "terminal"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "Amount in smallest currency unit, eg: cents, including all fees, surcharges, taxes etc."
          },
          "feeAmount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount."
          },
          "surchargeAmount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "This is assumed to already be included in the amount. (Available for Elavon processing only)"
          },
          "taxAmount": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0,
            "maximum": 999999999,
            "description": "Tax value included in total amount. Sales tax in the US, or PST for Canadian merchants. In smallest currency units, eg: cents in USD. This is assumed to already be included in the amount."
          },
          "capture": {
            "type": "boolean",
            "description": "Set this to false if you only want to authorize for the amount. Defaults to true."
          },
          "description": {
            "type": "string"
          },
          "reference": {
            "$ref": "#/components/schemas/reference"
          },
          "billing": {
            "description": "Optional billing details for the customer. If you have enabled AVS filters on your terminal, this becomes mandatory and AVS checks will be performed on the address.",
            "$ref": "#/components/schemas/customer"
          },
          "softDescriptor": {
            "$ref": "#/components/schemas/soft_descriptor"
          },
          "level3": {
            "$ref": "#/components/schemas/level3"
          },
          "options": {
            "$ref": "#/components/schemas/order_options"
          }
        }
      },
      "full_address": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "line1",
          "city",
          "postal_code",
          "country_code"
        ],
        "properties": {
          "line1": {
            "type": "string",
            "minLength": 2,
            "maxLength": 30
          },
          "line2": {
            "type": "string",
            "minLength": 2,
            "maxLength": 28
          },
          "city": {
            "type": "string",
            "minLength": 2,
            "maxLength": 20
          },
          "state": {
            "type": "string",
            "maxLength": 2
          },
          "postal_code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10
          },
          "country_code": {
            "type": "string",
            "description": "3-character alphabetical country code according to ISO 3166-1, eg: USA, CAN etc.",
            "pattern": "^[A-Z]{3}$"
          }
        }
      },
      "entity": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "address"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "phone": {
            "type": "string",
            "maxLength": 20
          },
          "website": {
            "type": "string",
            "maxLength": 70
          },
          "address": {
            "$ref": "#/components/schemas/full_address"
          }
        }
      },
      "account_details": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the account."
          },
          "status": {
            "type": "string",
            "description": "The current status of the account."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "business_entity": {
            "$ref": "#/components/schemas/entity"
          }
        }
      },
      "account_search": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Total number of accounts available."
          },
          "results": {
            "type": "array",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/account_details"
            }
          }
        }
      },
      "account": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "business_entity"
        ],
        "properties": {
          "business_entity": {
            "$ref": "#/components/schemas/entity"
          }
        }
      },
      "fiserv_merchant": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fiserv": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "mid"
            ],
            "properties": {
              "mid": {
                "description": "Fiserv's Merchant ID for this merchant.",
                "type": "string",
                "minLength": 2,
                "maxLength": 20
              }
            }
          }
        }
      },
      "elavon_merchant": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "elavon": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "mid",
              "bank_number"
            ],
            "properties": {
              "mid": {
                "description": "Elavon's Merchant ID for this merchant.",
                "type": "string",
                "minLength": 10,
                "maxLength": 10
              },
              "bank_number": {
                "description": "Elavon's bank number for this merchant.",
                "type": "string",
                "minLength": 6,
                "maxLength": 6
              }
            }
          }
        }
      },
      "merchant_details": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the merchant."
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "The current status of the merchant."
          },
          "processor_details": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/fiserv_merchant"
              },
              {
                "$ref": "#/components/schemas/elavon_merchant"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "merchant_search": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Total number of merchants available."
          },
          "results": {
            "type": "array",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/merchant_details"
            }
          }
        }
      },
      "merchant": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "processor_details"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "processor_details": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/fiserv_merchant"
              },
              {
                "$ref": "#/components/schemas/elavon_merchant"
              }
            ]
          }
        }
      },
      "fiserv_terminal": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fiserv": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "division_id"
            ],
            "properties": {
              "division_id": {
                "description": "Fiserv's Division ID for this merchant.",
                "type": "string",
                "minLength": 2,
                "maxLength": 10
              },
              "transarmor_token": {
                "description": "The TransArmor token for this terminal.",
                "type": "string",
                "minLength": 4,
                "maxLength": 4
              }
            }
          }
        }
      },
      "elavon_terminal": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "elavon": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "tid"
            ],
            "properties": {
              "tid": {
                "description": "Elavon's Terminal ID for this terminal.",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              }
            }
          }
        }
      },
      "card_brand": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "brand"
        ],
        "properties": {
          "brand": {
            "type": "string",
            "description": "The card brand, lowercase.",
            "enum": [
              "visa",
              "mastercard",
              "amex",
              "discover",
              "diners",
              "jcb",
              "union pay"
            ]
          },
          "mcc": {
            "type": "string",
            "description": "the MCC for the card brand.",
            "minLength": 2,
            "maxLength": 20
          }
        }
      },
      "features": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "instant_funding": {
            "type": "boolean",
            "default": false,
            "description": "Enable instant funding settlement for this terminal (Available for Elavon proccessing only)."
          },
          "apple_pay": {
            "type": "boolean",
            "default": false,
            "description": "Enable Apple Pay payments for this terminal."
          },
          "google_pay": {
            "type": "boolean",
            "default": false,
            "description": "Enable Google Pay payments for this terminal."
          },
          "paypal": {
            "type": "boolean",
            "default": false,
            "description": "Enable PayPal payments for this terminal."
          },
          "soft_descriptors": {
            "type": "boolean",
            "default": false,
            "description": "Enable Soft Descriptors for this terminal."
          },
          "level2": {
            "type": "boolean",
            "default": false,
            "description": "Enable support for Level2 payment fields for this terminal."
          },
          "level3": {
            "type": "boolean",
            "default": false,
            "description": "Enable support for Level3 payment fields for this terminal."
          }
        }
      },
      "terminal_details": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the terminal."
          },
          "name": {
            "type": "string"
          },
          "gateway_id": {
            "type": "string",
            "description": "An identifier for this terminal used when processing with the Payments API."
          },
          "status": {
            "type": "string",
            "description": "The current status of the terminal."
          },
          "time_zone": {
            "type": "string",
            "description": "The terminal's time zone."
          },
          "cutover_delta_minutes": {
            "type": "integer",
            "format": "int32",
            "minimum": -1439,
            "maximum": 1440,
            "description": "Cutover time expressed as minutes before (negative) or after (positive) midnight, eg. a delta of -100 means a cutover time of 10:20 PM."
          },
          "currency_code": {
            "type": "string",
            "description": "The currency in which payments will be processed."
          },
          "language": {
            "type": "string",
            "enum": [
              "en",
              "es"
            ]
          },
          "processor_details": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/fiserv_terminal"
              },
              {
                "$ref": "#/components/schemas/elavon_terminal"
              }
            ]
          },
          "settlement_entity": {
            "$ref": "#/components/schemas/entity"
          },
          "card_brands": {
            "type": "array",
            "maxItems": 20,
            "items": {
              "$ref": "#/components/schemas/card_brand"
            }
          },
          "features": {
            "$ref": "#/components/schemas/features"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "terminal_search": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Total number of terminals available."
          },
          "results": {
            "type": "array",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/terminal_details"
            }
          }
        }
      },
      "risk_control": {
        "type": "object",
        "required": [
          "hours_duration"
        ],
        "properties": {
          "hours_duration": {
            "type": "integer",
            "format": "uint32",
            "minimum": 1,
            "maximum": 168,
            "description": "Number of hours over which to query."
          },
          "only_approved": {
            "type": "boolean",
            "default": false,
            "description": "Whether to include all payments or only approved payments. Defaults to include all payments."
          },
          "enabled": {
            "type": "boolean",
            "default": false,
            "description": "Whether or not this control is enabled."
          }
        }
      },
      "risk_controls": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "avs_filter": {
            "type": "string",
            "description": "A string of AVS response codes which should cause the transaction to be declined, eg: \"MN\" would result in rejection of any payments with an AVS response code of \"M\" or \"N\". **Note:** acceptable AVS codes are dependent on which backend processor you are provisioned for."
          },
          "cvd_filter": {
            "type": "string",
            "description": "A string of CVD response codes which should cause the transaction to be declined, eg: \"XYS\" would result in rejection of any payments with a CVD response code of \"X\", \"Y\" or \"S\"."
          },
          "max_sale": {
            "type": "object",
            "description": "Any payment with an amount greater than this limit will be rejected.",
            "additionalProperties": false,
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint32",
                "description": "Maximum amount per payment, in cents.",
                "minimum": 1
              },
              "enabled": {
                "type": "boolean",
                "default": false,
                "description": "Whether or not this control is enabled."
              }
            }
          },
          "min_sale": {
            "type": "object",
            "description": "Any payment with an amount less than this limit will be rejected.",
            "additionalProperties": false,
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint32",
                "description": "Minimum amount per payment, in cents.",
                "minimum": 0
              },
              "enabled": {
                "type": "boolean",
                "default": false,
                "description": "Whether or not this control is enabled."
              }
            }
          },
          "max_transaction_sum": {
            "description": "Any payment will be rejected if the sum total of all payments in the specified period would be greater than the specified total.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "total"
                ],
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 1,
                    "description": "Maximum transaction sum allowed over the period, in cents."
                  }
                }
              },
              {
                "$ref": "#/components/schemas/risk_control"
              }
            ]
          },
          "max_transaction_count": {
            "description": "Any payment will be rejected if the total count of all payments in the specified period would be greater than the specified total.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "count"
                ],
                "properties": {
                  "count": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 1,
                    "description": "Maximum number of transactions allowed over the period."
                  }
                }
              },
              {
                "$ref": "#/components/schemas/risk_control"
              }
            ]
          },
          "max_card_sum": {
            "description": "Any payment will be rejected if the sum total of all payments for the payment's card number in the specified period would be greater than the specified total.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "total"
                ],
                "properties": {
                  "total": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 1,
                    "description": "Maximum transaction sum per card number allowed over the period, in cents."
                  }
                }
              },
              {
                "$ref": "#/components/schemas/risk_control"
              }
            ]
          },
          "max_card_count": {
            "description": "Any payment will be rejected if the total count of all payments for the payment's card number in the specified period would be greater than the specified total.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "count"
                ],
                "properties": {
                  "count": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 1,
                    "description": "Maximum transaction count per card number allowed over the period."
                  }
                }
              },
              {
                "$ref": "#/components/schemas/risk_control"
              }
            ]
          },
          "max_ip_count": {
            "description": "Any payment will be rejected if the total count of all payments for the customer's IP in the specified period would be greater than the specified total. To make use of this control, you must include the *customer_ip* field in your payment requests.",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "count"
                ],
                "properties": {
                  "count": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 1,
                    "description": "Maximum transaction count per IP address allowed over the period."
                  }
                }
              },
              {
                "$ref": "#/components/schemas/risk_control"
              }
            ]
          }
        }
      },
      "terminal": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "time_zone",
          "processor_details",
          "card_brands"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "currency_code": {
            "type": "string",
            "description": "The ISO currency code of the default currency for the terminal. Defaults to USD.",
            "pattern": "^[A-Z]{3}$"
          },
          "time_zone": {
            "type": "string",
            "description": "The terminal's time zone.",
            "enum": [
              "ADT",
              "AKDT",
              "AST",
              "CDT",
              "CST",
              "EDT",
              "EST",
              "HST",
              "MDT",
              "MST",
              "NDT",
              "PDT",
              "PST"
            ]
          },
          "cutover_delta_minutes": {
            "type": "integer",
            "format": "int32",
            "maximum": 1440,
            "minimum": -1439,
            "description": "Default cutover time is midnight on the day of recording. The delta is minutes before (negative) or after (positive) midnight, eg. a delta of -100 means a cutover time of 10:20 PM."
          },
          "language": {
            "type": "string",
            "enum": [
              "en",
              "es"
            ]
          },
          "processor_details": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/fiserv_terminal"
              },
              {
                "$ref": "#/components/schemas/elavon_terminal"
              }
            ]
          },
          "settlement_entity": {
            "$ref": "#/components/schemas/entity"
          },
          "card_brands": {
            "type": "array",
            "maxItems": 20,
            "description": "An array of card brands to be enabled for this terminal.",
            "items": {
              "$ref": "#/components/schemas/card_brand"
            }
          },
          "features": {
            "$ref": "#/components/schemas/features"
          },
          "risk_controls": {
            "$ref": "#/components/schemas/risk_controls"
          }
        }
      },
      "user_details": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for this user."
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "The current status of the user."
          },
          "activation_link": {
            "type": "string",
            "description": "The URL the user will need to visit to complete their account setup."
          },
          "last_login_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "user_search": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Total number of admin users available."
          },
          "results": {
            "type": "array",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/user_details"
            }
          }
        }
      },
      "create_user": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "first_name",
          "last_name",
          "email",
          "phone"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "last_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 50,
            "description": "The admin user's email address. This will become their username when logging into the Exact Gateway Admin UI."
          },
          "phone": {
            "type": "string",
            "maxLength": 14
          }
        }
      },
      "update_user": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "first_name",
          "last_name",
          "phone"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 50
          },
          "last_name": {
            "type": "string",
            "maxLength": 50
          },
          "phone": {
            "type": "string",
            "maxLength": 14
          }
        }
      },
      "CreateApplicationTokenRequest": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A description with the purpose of the token",
            "example": "Allows my-application to access transactions"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Permission name",
              "example": "charges.create"
            }
          },
          "mode": {
            "type": "string",
            "example": "test"
          }
        },
        "required": [
          "label",
          "permissions"
        ]
      },
      "ApplicationTokenResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the created token"
          },
          "type": {
            "type": "string",
            "description": "The type of the application"
          },
          "token": {
            "type": "string",
            "description": "When the token was created"
          },
          "allowedPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum"
            }
          },
          "allowedAccounts": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Account ID"
            }
          },
          "label": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the Token was created.",
            "format": "date-time",
            "example": "2022-01-24T15:05:18.262Z"
          }
        }
      },
      "AccountRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The account's name",
            "example": "Exact Payments"
          },
          "phone": {
            "type": "string",
            "description": "The account's phone number",
            "example": 1111111111
          },
          "email": {
            "type": "string",
            "description": "The account's email",
            "example": "contact@exactpay.com"
          },
          "onlinePresence": {
            "type": "string",
            "description": "Online presence",
            "example": "Online presence"
          },
          "facebook": {
            "type": "string",
            "description": "facebook",
            "example": "facebook"
          },
          "twitter": {
            "type": "string",
            "description": "twitter",
            "example": "twitter"
          },
          "linkedIn": {
            "type": "string",
            "description": "linkedIn",
            "example": "linkedIn"
          },
          "address": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "description": "The name of the City",
                "example": "Ottawa"
              },
              "country": {
                "type": "string",
                "description": "The name of the Country",
                "example": "Canada"
              },
              "line1": {
                "type": "string",
                "description": "The Address line 1",
                "example": "1st street"
              },
              "line2": {
                "type": "string",
                "description": "The Address line 2",
                "example": "Apartment 1234"
              },
              "postalCode": {
                "type": "string",
                "description": "The postal Code",
                "example": "A1A 1A1"
              },
              "state": {
                "type": "string",
                "description": "The State name",
                "example": "Ontario"
              }
            }
          }
        }
      },
      "AccountResponse": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "_id": "628bee3adfb95f34e36616b5",
            "id": "628bee3adfb95f34e36616b5",
            "type": "account",
            "parentAccountId": "62ed3ba4198abaf23bdaf68c",
            "name": "sb test account 2",
            "dbaName": "sb test account 2",
            "isLiveCapable": true,
            "isDisabled": false,
            "liveCapableAt": "2022-08-08T20:37:10.525Z",
            "features": [],
            "cascadingFeatures": [],
            "createdAt": "2022-05-23T20:27:38.688Z",
            "updatedAt": "2022-05-23T20:27:38.688Z",
            "phone": "8654037300",
            "email": "contact@company.com",
            "onlinePresence": "https://company.com",
            "address": {
              "city": "Knoxville",
              "country": "USA",
              "line1": "1 BUSINESS ST",
              "postalCode": "37920",
              "state": "TN"
            },
            "ach": {
              "customer": "ff9ae32c-e503-4a25-8633-951f969fd28c"
            }
          }
        },
        "properties": {
          "_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "parentAccountId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "dbaName": {
            "type": "string"
          },
          "isLiveCapable": {
            "type": "boolean"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "liveCapableAt": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cascadingFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "onlinePresence": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "disabledAt": {
            "type": "string"
          },
          "disabledByUser": {
            "type": "string"
          },
          "defaultMerchantId": {
            "type": "string"
          },
          "defaultTerminalId": {
            "type": "string"
          },
          "defaultTerminalGatewayId": {
            "type": "string"
          },
          "ach": {
            "type": "object",
            "properties": {
              "customer": {
                "type": "string"
              }
            }
          }
        },
        "description": ""
      },
      "DefaultResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "we1o0kuvdat5hllnhev4uoo9"
          }
        },
        "title": "DefaultResponseUnderscore"
      },
      "InviteAccept": {
        "type": "object",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "The password that the user decided to use to stablish its credentials in the system.",
            "example": "yourPassword"
          },
          "application": {
            "type": "string",
            "description": "The user credentials will be associated to this application.",
            "example": "admin-pwa"
          }
        }
      },
      "InviteRequest": {
        "type": "object",
        "required": [
          "user"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/InviteUser"
          }
        }
      },
      "InviteResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "61ef40bfa41a93e84ff3709c"
          },
          "user": {
            "$ref": "#/components/schemas/InviteUser"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the Invite was created.",
            "format": "date-time",
            "example": "2022-01-24T15:05:18.262Z"
          }
        }
      },
      "InviteUser": {
        "type": "object",
        "required": [
          "name",
          "email",
          "roles"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new user that will be invited into the system.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email that will be used by the system to send the invite, must be unique in the system.",
            "example": "john.doe@domain.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the invited user.",
            "example": 5621823401
          },
          "roles": {
            "type": "array",
            "description": "The role Ids granted to the user",
            "items": {
              "type": "string"
            },
            "example": [
              "61a78fe82c3156b0945ef135"
            ]
          }
        }
      },
      "LoginTokenCreate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "someone@example.com"
          },
          "password": {
            "type": "string",
            "example": "yourPassword"
          },
          "application": {
            "type": "string",
            "example": "admin-pwa"
          },
          "mode": {
            "type": "string",
            "example": "live"
          },
          "apiVersion": {
            "type": "string",
            "example": "2.0"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginTokenCreateResponse": {
        "required": [
          "isAuthenticated",
          "type",
          "token",
          "expiresAt",
          "allowedPermissions",
          "application",
          "account",
          "allowedAccounts",
          "user"
        ],
        "properties": {
          "isAuthenticated": {
            "description": "Indicates whether the PayFac user is authenticated or not",
            "type": "boolean"
          },
          "type": {
            "description": "Type of PayFac account that attempt the login",
            "type": "string",
            "example": "user"
          },
          "token": {
            "description": "Authentication token generated in the system, should be used in the API",
            "type": "string"
          },
          "expiresAt": {
            "description": "Expiration date of the token",
            "type": "string",
            "format": "date-time",
            "example": "2021-10-05T20:44:01.458Z"
          },
          "allowedPermissions": {
            "description": "Permissions associated to the PayFac user",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "application": {
            "description": "The application used in the login process",
            "type": "string"
          },
          "account": {
            "description": "The PayFac account that this PayFac user belongs to.",
            "type": "string"
          },
          "allowedAccounts": {
            "description": "List of PayFac accounts that this PayFac user has access to use the API against",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user": {
            "description": "User ID in the system",
            "type": "string"
          }
        },
        "title": ""
      },
      "MerchantCategoryCodes": {
        "description": "These are the valid merchant category codes that can be used as a criteria in the system.",
        "type": "string",
        "example": "1771",
        "enum": [
          "0742",
          "0763",
          "0780",
          "1520",
          "1711",
          "1731",
          "1740",
          "1750",
          "1761",
          "1771",
          "1799",
          "2741",
          "2791",
          "2842",
          "4011",
          "4111",
          "4112",
          "4119",
          "4121",
          "4131",
          "4214",
          "4215",
          "4225",
          "4411",
          "4457",
          "4468",
          "4511",
          "4582",
          "4722",
          "4723",
          "4761",
          "4784",
          "4789",
          "4812",
          "4813",
          "4814",
          "4816",
          "4821",
          "4829",
          "4899",
          "4900",
          "5013",
          "5021",
          "5039",
          "5044",
          "5045",
          "5046",
          "5047",
          "5051",
          "5065",
          "5072",
          "5074",
          "5085",
          "5094",
          "5099",
          "5111",
          "5122",
          "5131",
          "5137",
          "5139",
          "5169",
          "5172",
          "5192",
          "5193",
          "5198",
          "5199",
          "5200",
          "5211",
          "5231",
          "5251",
          "5261",
          "5271",
          "5299",
          "5300",
          "5309",
          "5310",
          "5311",
          "5331",
          "5399",
          "5411",
          "5422",
          "5441",
          "5451",
          "5462",
          "5499",
          "5511",
          "5521",
          "5532",
          "5533",
          "5541",
          "5542",
          "5551",
          "5561",
          "5571",
          "5592",
          "5598",
          "5599",
          "5611",
          "5621",
          "5631",
          "5641",
          "5651",
          "5655",
          "5661",
          "5681",
          "5691",
          "5697",
          "5698",
          "5699",
          "5712",
          "5713",
          "5714",
          "5718",
          "5719",
          "5722",
          "5732",
          "5733",
          "5734",
          "5735",
          "5811",
          "5812",
          "5813",
          "5814",
          "5815",
          "5816",
          "5817",
          "5818",
          "5921",
          "5931",
          "5932",
          "5933",
          "5935",
          "5937",
          "5940",
          "5941",
          "5942",
          "5943",
          "5944",
          "5945",
          "5946",
          "5947",
          "5948",
          "5949",
          "5950",
          "5960",
          "5961",
          "5962",
          "5963",
          "5964",
          "5965",
          "5966",
          "5967",
          "5968",
          "5969",
          "5970",
          "5971",
          "5972",
          "5973",
          "5974",
          "5975",
          "5976",
          "5977",
          "5978",
          "5983",
          "5992",
          "5993",
          "5994",
          "5995",
          "5996",
          "5997",
          "5998",
          "5999",
          "6010",
          "6011",
          "6012",
          "6050",
          "6051",
          "6211",
          "6236",
          "6300",
          "6381",
          "6513",
          "6529",
          "6530",
          "6535",
          "6536",
          "6537",
          "6538",
          "6539",
          "6540",
          "6611",
          "6760",
          "7011",
          "7012",
          "7032",
          "7033",
          "7210",
          "7211",
          "7216",
          "7217",
          "7221",
          "7230",
          "7251",
          "7261",
          "7273",
          "7276",
          "7277",
          "7278",
          "7280",
          "7295",
          "7296",
          "7297",
          "7298",
          "7299",
          "7311",
          "7321",
          "7332",
          "7333",
          "7338",
          "7339",
          "7342",
          "7349",
          "7361",
          "7372",
          "7375",
          "7379",
          "7392",
          "7393",
          "7394",
          "7395",
          "7399",
          "7512",
          "7513",
          "7519",
          "7523",
          "7524",
          "7531",
          "7534",
          "7535",
          "7538",
          "7542",
          "7549",
          "7622",
          "7623",
          "7629",
          "7631",
          "7641",
          "7692",
          "7699",
          "7800",
          "7801",
          "7802",
          "7829",
          "7832",
          "7833",
          "7841",
          "7911",
          "7922",
          "7929",
          "7932",
          "7933",
          "7941",
          "7991",
          "7992",
          "7993",
          "7994",
          "7995",
          "7996",
          "7997",
          "7998",
          "7999",
          "8011",
          "8021",
          "8031",
          "8041",
          "8042",
          "8043",
          "8044",
          "8049",
          "8050",
          "8062",
          "8071",
          "8099",
          "8111",
          "8211",
          "8220",
          "8241",
          "8244",
          "8249",
          "8299",
          "8351",
          "8398",
          "8641",
          "8651",
          "8661",
          "8675",
          "8699",
          "8734",
          "8743",
          "8911",
          "8931",
          "8999",
          "9034",
          "9211",
          "9222",
          "9223",
          "9311",
          "9399",
          "9401",
          "9402",
          "9405",
          "9700",
          "9701",
          "9702",
          "9751",
          "9752",
          "9754",
          "9950"
        ]
      },
      "OnboardingRequest": {
        "type": "object",
        "properties": {
          "workflow": {
            "type": "string",
            "description": "The workflow Id that will be used to onboard the user."
          },
          "clientIp": {
            "type": "string",
            "description": "The IP address of the user that will be used to onboard the user."
          },
          "merchant": {
            "$ref": "#/components/schemas/OnboardingMerchant"
          },
          "termsNConditions": {
            "type": "string"
          },
          "businessClassification": {
            "type": "string"
          }
        },
        "required": [
          "merchant"
        ]
      },
      "OnboardingMerchant": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the business assigned by the principal owner(s)",
            "example": "THE BAIT SHOP"
          },
          "businessRegistrationNumber": {
            "type": "string",
            "description": "Tax ID",
            "example": 888596928
          },
          "dbaName": {
            "type": "string",
            "description": "Business DBA name",
            "example": "Merchant DBA name"
          },
          "establishedDate": {
            "type": "string",
            "description": "Business established date",
            "format": "date-time",
            "example": "2021-07-21T16:24:22.678+00:00"
          },
          "numberOfEmployees": {
            "type": "number",
            "description": "Number of employees",
            "example": 100
          },
          "telephone": {
            "type": "string",
            "description": "Telephone number",
            "example": 2255441120
          },
          "email": {
            "type": "string",
            "description": "Business contact email",
            "example": "rejected@commpany.com"
          },
          "onlinePresence": {
            "type": "string",
            "description": "Website URL",
            "example": "www.rejected-company.com"
          },
          "facebook": {
            "description": "Facebook Link",
            "example": "www.linkedin.com/approved-company"
          },
          "twitter": {
            "description": "Twitter Link",
            "example": "www.twitter.com/approved-company"
          },
          "linkedIn": {
            "description": "LinkedIn Link",
            "example": "www.linkedin.com/in/approved-company"
          },
          "entityType": {
            "type": "string",
            "description": "Business entity type (LLC, Org, Sole Prop, Non-Profit, Corp)",
            "example": "LLC"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "principal": {
            "type": "array",
            "description": "The details for the principal owner of the business.",
            "items": {
              "$ref": "#/components/schemas/Principal"
            }
          },
          "anticipatedTransAmounts": {
            "$ref": "#/components/schemas/AnticipatedTransAmounts"
          },
          "bankingDetails": {
            "$ref": "#/components/schemas/BankingDetails"
          },
          "businessProfile": {
            "$ref": "#/components/schemas/BusinessProfile"
          },
          "mcc": {
            "type": "array",
            "description": "The business classification drives the MCC selection. Prohibited or high-risk MCC codes are identified by Exact and are marked accordingly. Prohibited accounts are immediately declined while onboarding.",
            "example": [
              1771,
              1761
            ],
            "items": {
              "$ref": "#/components/schemas/MerchantCategoryCodes"
            }
          }
        },
        "required": [
          "name",
          "businessRegistrationNumber",
          "dbaName",
          "establishedDate",
          "numberOfEmployees",
          "telephone",
          "email",
          "onlinePresence",
          "entityType",
          "address",
          "principal",
          "mcc"
        ]
      },
      "AnticipatedTransAmounts": {
        "required": [
          "averageTicketSize",
          "maxTicketSize",
          "anticipatedMonthlyVolume"
        ],
        "type": "object",
        "properties": {
          "averageTicketSize": {
            "type": "number",
            "description": "Average Ticket Size",
            "example": 750
          },
          "maxTicketSize": {
            "type": "number",
            "description": "Max Ticket Size",
            "example": 100
          },
          "anticipatedMonthlyVolume": {
            "type": "number",
            "description": "Anticipated Monthly Volume",
            "example": 50
          }
        }
      },
      "BankingDetails": {
        "type": "object",
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Bank Name",
            "example": "My Bank"
          },
          "routingNumber": {
            "type": "string",
            "description": "Routing Number",
            "example": 55443321
          },
          "ddaNumber": {
            "type": "string",
            "description": "DDA number",
            "example": 223334456
          },
          "bankNumber": {
            "type": "string",
            "description": "Bank number",
            "example": 1234567890
          },
          "plaidAccessToken": {
            "type": "string"
          }
        },
        "required": [
          "bankName",
          "routingNumber",
          "ddaNumber"
        ]
      },
      "BusinessProfile": {
        "required": [
          "servicesDescription",
          "currentlyAcceptingPayments",
          "acceptanceMethods",
          "recurringServices",
          "refundPolicyDescription"
        ],
        "type": "object",
        "properties": {
          "servicesDescription": {
            "type": "string",
            "description": "Services description",
            "example": "Services description"
          },
          "currentlyAcceptingPayments": {
            "type": "boolean",
            "description": "If yes, currentProcessor, currentGateway and reasonForLeaving are required",
            "example": true
          },
          "currentProcessor": {
            "type": "string",
            "description": "Current Processor",
            "example": "FirstData"
          },
          "currentGateway": {
            "type": "string",
            "description": "Current gateway",
            "example": "FirstData"
          },
          "reasonForLeaving": {
            "type": "string",
            "description": "Reason for leaving",
            "example": "Does not match expectations"
          },
          "acceptanceMethods": {
            "$ref": "#/components/schemas/AcceptanceMethods"
          },
          "recurringServices": {
            "type": "boolean",
            "description": "If yes, recurringServicesDescription is required",
            "example": true
          },
          "recurringServicesDescription": {
            "type": "string",
            "description": "Recurring Services description",
            "example": "Recurring Services description"
          },
          "refundPolicyDescription": {
            "type": "string",
            "description": "Refund policy",
            "example": "Refund policy"
          },
          "paymentTime": {
            "type": "string",
            "description": "Possible values 'Upon Purchase' | 'Upon Download' | 'At Time of Delivery' or any other",
            "example": "Upon Purchase"
          },
          "deliveryTimeframe": {
            "type": "string",
            "description": "Delivery time frame that the merchant have for its products",
            "enum": [
              "Immediate",
              "Within 7 days",
              "Within 14 days",
              "Within 30+ days"
            ],
            "example": "Immediate"
          }
        }
      },
      "AcceptanceMethods": {
        "type": "object",
        "required": [
          "moto",
          "internet",
          "swipe",
          "keyed"
        ],
        "properties": {
          "moto": {
            "type": "number",
            "example": 25
          },
          "internet": {
            "type": "number",
            "example": 25
          },
          "swipe": {
            "type": "number",
            "example": 25
          },
          "keyed": {
            "type": "number",
            "example": 25
          }
        },
        "description": "Sum (moto+internet+swipe+keyed) = 100"
      },
      "Address": {
        "required": [
          "line1",
          "city",
          "country",
          "countrySubdivision",
          "postalCode"
        ],
        "type": "object",
        "properties": {
          "line1": {
            "type": "string",
            "description": "The address for the merchant location. Usually includes street name.",
            "example": "MAIN AVENUE 42"
          },
          "line2": {
            "type": "string",
            "description": "Used to specify more information about the merchant location. This is optional",
            "example": "42-59B Building A"
          },
          "city": {
            "type": "string",
            "description": "The name of the city for a merchant location.",
            "example": "PHOENIX"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code for a merchant location (only supported for US and Canada merchants).",
            "example": 85008
          },
          "country": {
            "type": "string",
            "maxLength": 3,
            "description": "The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1.",
            "example": "USA"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "The three digit country subdivision code values are Three digit alpha country codes as defined in ISO 3166-1.",
            "example": "AZ"
          }
        }
      },
      "Principal": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the principal owner of the business.",
            "example": "Justin"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the principal owner of the business.",
            "example": "Williams"
          },
          "title": {
            "$ref": "#/components/schemas/TitleValues"
          },
          "telephone": {
            "type": "string",
            "example": 2255441120
          },
          "email": {
            "type": "string",
            "example": "email@principal.com"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "example": "1990-07-21T16:24:22.678+00:00"
          },
          "driversLicense": {
            "type": "string",
            "example": "M15698025"
          },
          "driversLicenseState": {
            "type": "string",
            "example": "IL"
          },
          "ssn": {
            "type": "string",
            "description": "Social Security Number",
            "example": 756755675
          },
          "percentOfOwnership": {
            "type": "number",
            "example": 50
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "currentOwnershipYears": {
            "type": "number"
          },
          "currentOwnershipMonths": {
            "type": "number"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "title",
          "telephone",
          "email",
          "dateOfBirth",
          "driversLicense",
          "driversLicenseState",
          "ssn",
          "percentOfOwnership",
          "address"
        ]
      },
      "TitleValues": {
        "type": "string",
        "example": "CEO/President",
        "enum": [
          "CEO/President",
          "Owner/Founder",
          "VP/Director",
          "Manager",
          "Administrator",
          "Other"
        ]
      },
      "OnboardingCreateResponse": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "onboardingId": "61fdb62ed4929346957b3689",
            "status": "autoApproved",
            "createdAt": "2020-04-01T16:24:22.678+00:00"
          }
        },
        "properties": {
          "_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "OnboardingResponse": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "_id": "615633de394b55001c954640",
            "status": "Checking",
            "merchant": {
              "name": "THE BAIT SHOP",
              "businessRegistrationNumber": 888596928,
              "dbaName": "Merchant DBA name",
              "establishedDate": "2021-07-21T16:24:22.678+00:00",
              "numberOfEmployees": 100,
              "telephone": 2255441120,
              "email": "rejected@commpany.com",
              "onlinePresence": "www.rejected-company.com",
              "facebook": "www.linkedin.com/approved-company",
              "twitter": "www.twitter.com/approved-company",
              "linkedIn": "www.linkedin.com/in/approved-company",
              "entityType": "LLC",
              "callbackURL": "http://payfacurl.com:8080/notifyme",
              "address": {
                "line1": "MAIN AVENUE 42",
                "line2": "42-59B Building A",
                "city": "PHOENIX",
                "postalCode": 85008,
                "country": "USA",
                "countrySubdivision": "AZ"
              },
              "principal": [
                {
                  "firstName": "Justin",
                  "lastName": "Williams",
                  "title": "CEO/President",
                  "telephone": 2255441120,
                  "email": "email@principal.com",
                  "dateOfBirth": "1990-07-21T16:24:22.678+00:00",
                  "driversLicense": "M15698025",
                  "driversLicenseState": "IL",
                  "ssn": 756755675,
                  "percentOfOwnership": 50,
                  "address": {
                    "line1": "MAIN AVENUE 42",
                    "line2": "42-59B Building A",
                    "city": "PHOENIX",
                    "postalCode": 85008,
                    "country": "USA",
                    "countrySubdivision": "AZ"
                  }
                }
              ],
              "anticipatedTransAmounts": {
                "averageTicketSize": 750,
                "maxTicketSize": 100,
                "anticipatedMonthlyVolume": 50
              },
              "bankingDetails": {
                "bankName": "My Bank",
                "routingNumber": 55443321,
                "ddaNumber": 223334456,
                "bankNumber": 1234567890
              },
              "businessProfile": {
                "servicesDescription": "Services description",
                "currentlyAcceptingPayments": true,
                "currentProcessor": "FirstData",
                "currentGateway": "FirstData",
                "reasonForLeaving": "Does not match expectations",
                "acceptanceMethods": {
                  "moto": 25,
                  "internet": 25,
                  "swipe": 25,
                  "keyed": 25
                },
                "recurringServices": true,
                "recurringServicesDescription": "Recurring Services description",
                "refundPolicyDescription": "Refund policy",
                "paymentTime": "Upon Purchase",
                "deliveryTimeframe": "Immediate"
              },
              "mcc": [
                1771,
                1761
              ]
            },
            "organizationId": "6151ffdbefd963001c6c9d2d",
            "createdAt": "2021-09-30T22:02:06.803Z",
            "updatedAt": "2021-09-30T22:02:24.253Z",
            "__v": 1
          }
        },
        "properties": {
          "_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "merchant": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "businessRegistrationNumber": {
                "type": "integer"
              },
              "dbaName": {
                "type": "string"
              },
              "establishedDate": {
                "type": "string"
              },
              "numberOfEmployees": {
                "type": "integer"
              },
              "telephone": {
                "type": "integer"
              },
              "email": {
                "type": "string"
              },
              "onlinePresence": {
                "type": "string"
              },
              "facebook": {
                "type": "string"
              },
              "twitter": {
                "type": "string"
              },
              "linkedIn": {
                "type": "string"
              },
              "entityType": {
                "type": "string",
                "enum": [
                  "LLC",
                  "Corp",
                  "Sole Prop",
                  "Non - Profit"
                ]
              },
              "address": {
                "type": "object",
                "properties": {
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "integer"
                  },
                  "country": {
                    "type": "string"
                  },
                  "countrySubdivision": {
                    "type": "string"
                  }
                }
              },
              "principal": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "telephone": {
                      "type": "integer"
                    },
                    "email": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "driversLicense": {
                      "type": "string"
                    },
                    "driversLicenseState": {
                      "type": "string"
                    },
                    "ssn": {
                      "type": "integer"
                    },
                    "percentOfOwnership": {
                      "type": "integer"
                    },
                    "address": {
                      "type": "object",
                      "properties": {
                        "line1": {
                          "type": "string"
                        },
                        "line2": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "postalCode": {
                          "type": "integer"
                        },
                        "country": {
                          "type": "string"
                        },
                        "countrySubdivision": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "anticipatedTransAmounts": {
                "type": "object",
                "properties": {
                  "averageTicketSize": {
                    "type": "integer"
                  },
                  "maxTicketSize": {
                    "type": "integer"
                  },
                  "anticipatedMonthlyVolume": {
                    "type": "integer"
                  }
                }
              },
              "bankingDetails": {
                "type": "object",
                "properties": {
                  "bankName": {
                    "type": "string"
                  },
                  "routingNumber": {
                    "type": "integer"
                  },
                  "ddaNumber": {
                    "type": "integer"
                  },
                  "bankNumber": {
                    "type": "integer"
                  }
                }
              },
              "businessProfile": {
                "type": "object",
                "properties": {
                  "servicesDescription": {
                    "type": "string"
                  },
                  "currentlyAcceptingPayments": {
                    "type": "boolean"
                  },
                  "currentProcessor": {
                    "type": "string"
                  },
                  "currentGateway": {
                    "type": "string"
                  },
                  "reasonForLeaving": {
                    "type": "string"
                  },
                  "acceptanceMethods": {
                    "type": "object",
                    "properties": {
                      "moto": {
                        "type": "integer"
                      },
                      "internet": {
                        "type": "integer"
                      },
                      "swipe": {
                        "type": "integer"
                      },
                      "keyed": {
                        "type": "integer"
                      }
                    }
                  },
                  "recurringServices": {
                    "type": "boolean"
                  },
                  "recurringServicesDescription": {
                    "type": "string"
                  },
                  "refundPolicyDescription": {
                    "type": "string"
                  },
                  "paymentTime": {
                    "type": "string",
                    "enum": [
                      "Upon Purchase",
                      "Upon Download",
                      "At Time of Delivery",
                      "Other"
                    ]
                  },
                  "deliveryTimeframe": {
                    "type": "string"
                  }
                }
              },
              "mcc": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          "organizationId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "__v": {
            "type": "integer"
          }
        }
      },
      "OnboardingDocumentRequestCreate": {
        "x-examples": {
          "example-1": {
            "type": "Application Status Update - Pending Documentation",
            "subject": "Application Status Update Pending Documentation",
            "body": "Your application status has been updated to the following:\nPended.\nOur Underwriting team has requested additional\ndocumentation to process your approval.\nPlease upload the required documents.\n"
          }
        },
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type to the document request,",
            "example": "Application Status Update - Pending Documentation"
          },
          "subject": {
            "type": "string",
            "description": "A phrase or text that specifies the subject of the request",
            "example": "Application Status Update Pending Documentation"
          },
          "body": {
            "type": "string",
            "description": "The content of the document request",
            "example": "Your application status has been updated to the following:\nPended.\nOur Underwriting team has requested additional\ndocumentation to process your approval.\nPlease upload the required documents.\n"
          }
        }
      },
      "OnboardingDocumentRequestResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated ID for the document request",
            "example": "6157861eef0827001c99d1eb"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "The type to the document request,",
            "example": "Verify Email"
          },
          "subject": {
            "type": "string",
            "description": "A phrase or text that specifies the subject of the request",
            "example": "Documents Request"
          },
          "body": {
            "type": "string",
            "description": "The content of the document request",
            "example": "Documents Request"
          },
          "onboarding": {
            "type": "string",
            "description": "The reference to the onboarding application that the document request belongs to",
            "example": "6154ce01387b94001cd87ada"
          },
          "user": {
            "type": "string",
            "description": "The reference to the PayFac user that create the document request",
            "example": "615498b8efd963001c6c9d62"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the document request was created",
            "format": "date-time",
            "example": "2021-10-01T22:05:18.262Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when the document request was updated",
            "format": "date-time",
            "example": "2021-10-01T22:05:18.262Z"
          }
        }
      },
      "OnboardingNote": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated ID for the note",
            "example": "6157861eef0827001c99d1eb"
          },
          "id": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "description": "The reference to the PayFac user that create the note",
            "example": "615498b8efd963001c6c9d62"
          },
          "userName": {
            "type": "string",
            "description": "The username that created the note for the onboarding application",
            "example": "Username"
          },
          "account": {
            "type": "string",
            "description": "The reference to the PayFac account used to create the note",
            "example": "6151ffdbefd963001c6c9d2d"
          },
          "note": {
            "type": "string",
            "description": "The reference to the PayFac user that created the note",
            "example": "The text of the note"
          },
          "onboarding": {
            "type": "string",
            "description": "The reference to the onboarding application that the note belongs to",
            "example": "6154ce01387b94001cd87ada"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the onboarding application was created",
            "format": "date-time",
            "example": "2021-10-01T22:05:18.262Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when the onboarding application was updated",
            "format": "date-time",
            "example": "2021-10-01T22:05:18.262Z"
          }
        }
      },
      "OnboardingRetryRuleRequest": {
        "type": "object",
        "properties": {
          "ruleName": {
            "type": "string"
          }
        },
        "required": [
          "ruleName"
        ]
      },
      "ParentIdRequest": {
        "type": "object",
        "properties": {
          "parentAccount": {
            "type": "string",
            "description": "Unique identifier of the parent organization for the created PayFac",
            "example": "57f424bb7e534ff71f6e5626"
          }
        }
      },
      "PayFacRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "PayFac name"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cascadingFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "PayFacResponse": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "_id": "6231202727f437989a0ee551",
            "id": "6231202727f437989a0ee551",
            "type": "account",
            "parentAccountId": "57f424bb7e534ff71f6e5626",
            "name": "EXACT PAYMENTS TEST SB Payments 1",
            "dbaName": "EXACT PAYMENTS TEST SB Payments 1",
            "isLiveCapable": false,
            "isDisabled": false,
            "features": [],
            "cascadingFeatures": [],
            "createdAt": "2022-03-15T23:24:23.933Z",
            "updatedAt": "2022-03-15T23:24:23.933Z",
            "phone": "8654037300",
            "email": "contact@company.com",
            "onlinePresence": "https://company.com",
            "address": {
              "city": "Knoxville",
              "country": "USA",
              "line1": "1 BUSINESS ST",
              "postalCode": "37920",
              "state": "TN"
            }
          }
        },
        "properties": {
          "_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "parentAccountId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "dbaName": {
            "type": "string"
          },
          "isLiveCapable": {
            "type": "boolean"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cascadingFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "onlinePresence": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "sentToBank": {
            "type": "boolean",
            "description": "Whether or not the payment details were submitted to the bank for authorization."
          },
          "bankResponse": {
            "type": "object",
            "description": "Details of the response from the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "100"
              },
              "message": {
                "type": "string",
                "example": "Approved"
              }
            }
          },
          "exactResponse": {
            "type": "object",
            "description": "Details of why the payment details were not submitted to the bank. Will not be present if payment details were sent to the bank.",
            "properties": {
              "code": {
                "type": "string",
                "example": "26"
              },
              "message": {
                "type": "string",
                "example": "Invalid Card Number"
              }
            }
          },
          "terminal": {
            "type": "object",
            "properties": {
              "gatewayId": {
                "type": "string",
                "description": "Which terminal the token was generated on."
              }
            }
          },
          "tokenDetails": {
            "$ref": "#/components/schemas/TokenDetails"
          }
        }
      },
      "TokenDetails": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token value"
          },
          "tokenType": {
            "type": "string",
            "enum": [
              "exactpay",
              "processor"
            ]
          },
          "cardBrand": {
            "type": "string",
            "description": "The brand of the tokenized credit card, lowercase."
          },
          "cardholder": {
            "type": "string"
          },
          "last4": {
            "type": "string",
            "description": "The last 4 digits of the card which was tokenized."
          },
          "expiryMonth": {
            "type": "string",
            "pattern": "/^\\d{2}$/"
          },
          "expiryYear": {
            "type": "string",
            "pattern": "/^\\d{4}$/"
          },
          "cvdCheck": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "The response code from any check on the CVD code."
              },
              "description": {
                "type": "string",
                "description": "a description of the check which was done."
              }
            }
          }
        }
      },
      "RequestFailure": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReportExpiresAt": {
        "type": "string",
        "description": "When the report will be unavailable.",
        "format": "date-time",
        "example": "2030-01-01T00:00:00.000Z"
      },
      "ReportParameters": {
        "type": "object",
        "required": [
          "start"
        ],
        "description": "Basic filters to apply when the report is being generated.",
        "properties": {
          "start": {
            "type": "string",
            "description": "Starting timestamp of data to be included in the Report.",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "end": {
            "type": "string",
            "description": "Ending timestamp of data to be included in the Report (inclusive until Report request).",
            "example": "2021-12-31T23:59:59.999Z"
          },
          "user": {
            "type": "string",
            "description": "Who requested the Report.",
            "example": "61a78fe82c3156b0945ef135"
          },
          "accounts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "PayFac to be included in the report.",
            "example": [
              "61a7907e2c3156b0945ef136",
              "61a7907e2c3156b0945ef137"
            ]
          }
        }
      },
      "ReportQueryRequest": {
        "type": "object",
        "required": [
          "parameters",
          "expiresAt"
        ],
        "properties": {
          "parameters": {
            "$ref": "#/components/schemas/ReportParameters"
          },
          "expiresAt": {
            "$ref": "#/components/schemas/ReportExpiresAt"
          }
        }
      },
      "ReportQueryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "properties": {
              "start": {
                "type": "string"
              },
              "end": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "accounts": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "expiresAt": {
            "type": "string"
          },
          "runAt": {
            "type": "string"
          },
          "failedAttempts": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "x-examples": {
          "example-1": {
            "_id": "61a7a8782c3156b0945ef138",
            "status": "created",
            "domain": "account",
            "organization": "61a7b3e22c3156b0945ef139",
            "parameters": {
              "start": "2021-01-01T00:00:00.000Z",
              "end": "2021-12-31T23:59:59.999Z",
              "user": "61a78fe82c3156b0945ef135",
              "accounts": [
                "61a7907e2c3156b0945ef136",
                "61a7907e2c3156b0945ef137"
              ]
            },
            "expiresAt": "2030-01-01T00:00:00.000Z",
            "runAt": "2021-12-01T18:11:13.618Z",
            "failedAttempts": 0,
            "createdAt": "2021-10-01T22:05:18.262Z",
            "updatedAt": "2021-10-01T22:05:18.262Z",
            "__v": 0
          }
        }
      },
      "RoleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61eb502860ff1ad726a78b2d"
          },
          "accountId": {
            "type": "string",
            "description": "Unique identifier of the current PayFac",
            "example": "61eb5028a41a93e84ff3685a"
          },
          "name": {
            "type": "string",
            "example": "Data Analyst"
          },
          "description": {
            "type": "string",
            "description": "Describes the purpose of what this role was created for.",
            "example": "Users with the role Data Analyst are granted enough access to to system information required to review and analyst account behavior on the system."
          },
          "permissions": {
            "type": "array",
            "description": "Is the list of available permissions for the current role, each permission represents specific actions within the system.",
            "items": {
              "type": "string",
              "example": [
                "reports.create",
                "reports.read",
                "reports.update",
                "reports.delete"
              ]
            }
          },
          "inheritedPermissions": {
            "type": "array",
            "description": "Is the list of permissions inherited from other PayFac which is a parent.",
            "items": {
              "type": "string"
            },
            "example": [
              "61eb5028a41a93e84ff3685b",
              "61eb5028a41a93e84ff3685c"
            ]
          },
          "parentRoleIds": {
            "type": "array",
            "description": "Represents the role id in the parent organization from which the permissions will be inherited.",
            "items": {
              "type": "string"
            },
            "example": [
              "61eb5028a41a93e84ff3685d",
              "61eb5028a41a93e84ff3685e"
            ]
          },
          "ancestorRoleIds": {
            "type": "array",
            "description": "Represents the role id in the an upper organization in the hierarchy (not the parent) from which the permissions will be inherited.",
            "items": {
              "type": "string"
            },
            "example": [
              "61eb5028a41a93e84ff3685f",
              "61eb5028a41a93e84ff36850"
            ]
          },
          "grantableRoleIds": {
            "type": "array",
            "description": "Represents the role id of the roles that can be granted for the new users.",
            "items": {
              "type": "string"
            },
            "example": [
              "61eb5028a41a93e84ff36851",
              "61eb5028a41a93e84ff36852"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the Role was created.",
            "format": "date-time",
            "example": "2022-01-21T15:05:18.262Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when the Role was updated.",
            "format": "date-time",
            "example": "2022-01-21T15:05:18.262Z"
          }
        }
      },
      "UnderwritingWorkflowRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "entryRule": {
            "type": "string",
            "description": "Is the first rule of the underwriting workflow process that will be used to evaluate the merchant application.",
            "example": "High Risk MCC"
          },
          "rules": {
            "$ref": "#/components/schemas/UnderwritingRule"
          }
        }
      },
      "UnderwritingWorkflowResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The automatically generated ID for the underwriting workflow",
            "example": "61523709444c51fa997257fe"
          },
          "id": {
            "type": "string",
            "description": "The automatically generated ID for the underwriting workflow",
            "example": "61523709444c51fa997257fe"
          },
          "organization": {
            "type": "string",
            "description": "The ID of the PayFac that this underwriting workflows belongs to.",
            "example": "57f424bb7e534ff71f6e5626"
          },
          "name": {
            "type": "string",
            "description": "The name of the underwriting workflow",
            "example": "High Risk Merchants"
          },
          "entryRule": {
            "type": "string",
            "description": "Is the first rule of the underwriting process that will be used to evaluate the onboarding request.",
            "example": "High Risk MCC"
          },
          "rules": {
            "$ref": "#/components/schemas/UnderwritingRule"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is the underwriting workflow enabled",
            "example": true
          },
          "default": {
            "type": "boolean",
            "description": "Is the underwriting workflow the default workflow",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the onboarding application was created",
            "format": "date-time",
            "example": "2021-10-01T22:05:18.262Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when the onboarding application was updated",
            "format": "date-time",
            "example": "2021-10-01T22:05:18.262Z"
          }
        }
      },
      "UnderwritingRule": {
        "type": "array",
        "minItems": 1,
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/BusinessRule"
            },
            {
              "$ref": "#/components/schemas/MastercardRule"
            },
            {
              "$ref": "#/components/schemas/OFACRule"
            },
            {
              "$ref": "#/components/schemas/PlaidAuthRule"
            },
            {
              "$ref": "#/components/schemas/PlaidBalanceRule"
            },
            {
              "$ref": "#/components/schemas/PlaidIdentityRule"
            },
            {
              "$ref": "#/components/schemas/TruliooKYBRule"
            },
            {
              "$ref": "#/components/schemas/TruliooKYCRule"
            },
            {
              "$ref": "#/components/schemas/TruliooInternationalWatchlistRule"
            }
          ]
        }
      },
      "BusinessRule": {
        "type": "object",
        "required": [
          "name",
          "type",
          "options",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "High Risk MCC"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Business Information"
            ],
            "default": "Business Information"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The options that will be used to evaluate the rule",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "The field that will be used to evaluate the rule",
                  "enum": [
                    "merchant.name",
                    "merchant.dbaName",
                    "merchant.telephone",
                    "merchant.email",
                    "merchant.onlinePresence",
                    "merchant.address.country",
                    "merchant.address.line1",
                    "merchant.address.city",
                    "merchant.address.countrySubdivision",
                    "merchant.address.postalCode",
                    "merchant.businessRegistrationNumber",
                    "merchant.establishedDate",
                    "merchant.facebook",
                    "merchant.twitter",
                    "merchant.linkedin",
                    "merchant.bankingDetails.bankName",
                    "merchant.bankingDetails.routingNumber",
                    "merchant.entityType",
                    "merchant.principal.firstName",
                    "merchant.principal.lastName",
                    "merchant.principal.telephone",
                    "merchant.principal.email",
                    "merchant.principal.address.country",
                    "merchant.principal.address.line1",
                    "merchant.principal.address.city",
                    "merchant.principal.address.countrySubdivision",
                    "merchant.principal.address.postalCode",
                    "merchant.principal.percentOfOwnership",
                    "merchant.anticipatedTransAmounts.averageTicketSize",
                    "merchant.anticipatedTransAmounts.anticipatedMonthlyVolume",
                    "merchant.anticipatedTransAmounts.maxTicketSize",
                    "merchant.mcc",
                    "merchant.businessProfile.servicesDescription",
                    "merchant.businessProfile.deliveryTimeframe",
                    "merchant.businessProfile.acceptanceMethods.moto",
                    "merchant.businessProfile.acceptanceMethods.internet",
                    "merchant.businessProfile.acceptanceMethods.swipe",
                    "merchant.businessProfile.acceptanceMethods.keyed"
                  ]
                },
                "operator": {
                  "description": "The operator that will be used to evaluate the rule\\\nstartsWith - The field value must start with the value1\\\nendsWith - The field value must end with the value1\\\neq - The field value must be equal to the value1\\\ncontains - The field value must contain the value1\\\nexclude - The field value must not contain the value1\\\ngt - The field value must be greater than the value1\\\ngte - The field value must be greater than or equal to the value1\\\nlt - The field value must be less than the value1\\\nlte - The field value must be less than or equal to the value1\\\nbetween - The field value must be between the value1 and value2\\\nin - The field value must be in the list of values1\\\nintersection - The field value must be in the intersection of the list of values1\n",
                  "type": "string",
                  "enum": [
                    "startsWith",
                    "endsWith",
                    "eq",
                    "contains",
                    "exclude",
                    "gt",
                    "gte",
                    "lt",
                    "lte",
                    "between",
                    "in",
                    "intersection"
                  ]
                },
                "value1": {
                  "description": "The first value that will be used to evaluate the rule",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "value2": {
                  "description": "The second value that will be used to evaluate the rule",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              },
              "required": [
                "field",
                "operator",
                "value1"
              ]
            },
            "description": "Criteria options that will be evaluated in the rule, the evaluation of these options will be against the body of the merchant.\\\nShould contain at least one of the properties.\n",
            "minProperties": 1
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "accept"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "review"
          }
        }
      },
      "MastercardRule": {
        "type": "object",
        "required": [
          "name",
          "type",
          "options",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Medium Risk Mastercard Match"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Mastercard Match"
            ],
            "default": "Mastercard Match"
          },
          "options": {
            "type": "object",
            "description": "Criteria options that will be evaluated in the rule, the evaluation of these options will be against the response of the Mastercard Match API.\\\nShould contain at least one of the properties.\n",
            "minProperties": 1,
            "properties": {
              "merchant": {
                "$ref": "#/components/schemas/MastercardRuleMerchantOptions"
              },
              "principal": {
                "$ref": "#/components/schemas/MastercardRulePrincipalOptions"
              }
            }
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "review"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "reject"
          }
        }
      },
      "MastercardRuleMerchantOptions": {
        "type": "object",
        "description": "Contains the fields in the merchant match portion of the response that will be evaluated as part of the criteria.\n",
        "properties": {
          "Name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "DoingBusinessAsName": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "NationalTaxId": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "ServiceProvLegal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "ServiceProvDBA": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          }
        }
      },
      "MastercardRulePrincipalOptions": {
        "type": "object",
        "description": "Contains the fields in the merchants principal match portion of the response that will be evaluated as part of the criteria.\n",
        "properties": {
          "Name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "Address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "PhoneNumber": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "NationalId": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          },
          "DriversLicense": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MastercardRuleValueOptions"
            }
          }
        }
      },
      "MastercardRuleValueOptions": {
        "type": "string",
        "description": "Represents what happened with some specific field in the mastercard evaluation check.\\\n*M00* represents no Match, *M01* represents a partial match and *M02* represents an exact match.\n",
        "example": "M00",
        "enum": [
          "M00",
          "M01",
          "M02"
        ]
      },
      "MinMax": {
        "type": "object",
        "description": "Values must be between 0 and 100\nMin < Max",
        "properties": {
          "min": {
            "type": "number",
            "minimum": 0,
            "description": "Min threshold that will be used as a criteria in the condition, this value is inclusive. Min must be less than Max",
            "example": 50,
            "maximum": 100
          },
          "max": {
            "type": "number",
            "description": "Max threshold that will be used as a criteria in the condition, this value is inclusive. Max must be greater than Min",
            "example": 50,
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": [
          "min",
          "max"
        ]
      },
      "OFACRule": {
        "type": "object",
        "description": "Will evaluate the score in the OFAC API response against the configured threshold.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Medium Risk OFAC"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "OFAC"
            ],
            "default": "OFAC"
          },
          "options": {
            "$ref": "#/components/schemas/MinMax"
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "Medium Risk Mastercard Match"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "review"
          }
        },
        "required": [
          "name",
          "type",
          "options",
          "onPass",
          "onFail"
        ]
      },
      "PlaidAuthRule": {
        "type": "object",
        "description": "Will request Plaid Auth information if the merchant application contains a plaid access token.",
        "required": [
          "name",
          "type",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Get Plaid Auth"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Plaid Auth"
            ],
            "default": "Plaid Auth"
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "Medium Risk OFAC"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "reject"
          }
        }
      },
      "PlaidBalanceRule": {
        "type": "object",
        "description": "Will request Plaid Balance information if the merchant application contains a plaid access token.",
        "required": [
          "name",
          "type",
          "options",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Get Plaid Balance"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Plaid Balance"
            ],
            "default": "Plaid Balance"
          },
          "options": {
            "type": "object",
            "description": "Options that will be used to evaluate the Plaid Balance information.\n",
            "properties": {
              "minimumBalance": {
                "type": "number",
                "description": "The minimum balance that the merchant must have in order to pass the rule.\nIf the merchant has a balance that is less than the minimum balance, the rule will fail.\n",
                "example": 100
              }
            },
            "required": [
              "minimumBalance"
            ]
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "Medium Risk OFAC"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "reject"
          }
        }
      },
      "PlaidIdentityRule": {
        "type": "object",
        "description": "Will request Plaid Identity information if the merchant application contains a plaid access token.",
        "required": [
          "name",
          "type",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Get Plaid Identity"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Plaid Identity"
            ],
            "default": "Plaid Identity"
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "Medium Risk OFAC"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "reject"
          }
        }
      },
      "TruliooInternationalWatchlistRule": {
        "type": "object",
        "description": "Will evaluate whether the merchant information sent to Trulioo International Watchlist API is a match or no.",
        "required": [
          "name",
          "type",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Medium Risk Trulioo International Watchlist"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Trulioo International Watchlist"
            ],
            "default": "Trulioo International Watchlist"
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "Medium Risk OFAC"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "reject"
          }
        }
      },
      "TruliooKYBRule": {
        "type": "object",
        "description": "Will evaluate whether the merchant information sent to Trulioo KYB API is a match or no.",
        "required": [
          "name",
          "type",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Medium Risk Trulioo KYB"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Trulioo KYB"
            ],
            "default": "Trulioo KYB"
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "Medium Risk Trulioo KYC"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "review"
          }
        }
      },
      "TruliooKYCRule": {
        "type": "object",
        "description": "Will evaluate whether the merchant information sent to Trulioo KYC API is a match or no.",
        "required": [
          "name",
          "type",
          "onPass",
          "onFail"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name that will be assigned to this rule by the underwriter",
            "example": "Medium Risk Trulioo KYC"
          },
          "type": {
            "type": "string",
            "description": "Type of rule that will be evaluated by the decision engine",
            "enum": [
              "Trulioo KYC"
            ],
            "default": "Trulioo KYC"
          },
          "onPass": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule matches its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "Medium Risk Trulioo International Watchlist"
          },
          "onFail": {
            "type": "string",
            "description": "Indicates what action the decision engine will take if the rule does not match its criteria.\\\nThe possible values are *accept*, *reject*, *review* or other rule name in this rule set to be evaluated.\n",
            "example": "review"
          }
        }
      },
      "UpdatableOnboardingRequest": {
        "type": "object",
        "properties": {
          "merchant": {
            "$ref": "#/components/schemas/UpdatableMerchant"
          }
        }
      },
      "UpdatableMerchant": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the business assigned by the principal owner(s)",
            "example": "THE BAIT SHOP"
          },
          "businessRegistrationNumber": {
            "type": "string",
            "description": "Tax ID",
            "example": 888596928
          },
          "dbaName": {
            "type": "string",
            "description": "Business DBA name",
            "example": "Merchant DBA name"
          },
          "establishedDate": {
            "type": "string",
            "description": "Business established date",
            "format": "date-time",
            "example": "2021-07-21T16:24:22.678+00:00"
          },
          "numberOfEmployees": {
            "type": "number",
            "description": "Number of employees",
            "example": 100
          },
          "telephone": {
            "type": "string",
            "description": "Telephone number",
            "example": 2255441120
          },
          "email": {
            "type": "string",
            "description": "Business contact email",
            "example": "rejected@commpany.com"
          },
          "onlinePresence": {
            "type": "string",
            "description": "Website URL",
            "example": "www.rejected-company.com"
          },
          "facebook": {
            "description": "Facebook Link",
            "example": "www.linkedin.com/approved-company"
          },
          "twitter": {
            "description": "Twitter Link",
            "example": "www.twitter.com/approved-company"
          },
          "linkedIn": {
            "description": "LinkedIn Link",
            "example": "www.linkedin.com/in/approved-company"
          },
          "entityType": {
            "type": "string",
            "description": "Business entity type (LLC, Org, Sole Prop, Non-Profit, Corp)",
            "example": "LLC"
          },
          "callbackURL": {
            "type": "string",
            "description": "The URL that will be used to notify the validation result via POST",
            "example": "http://payfacurl.com:8080/notifyme"
          },
          "address": {
            "$ref": "#/components/schemas/UpdatableAddress"
          },
          "principal": {
            "type": "array",
            "description": "The details for the principal owner of the business.  A maximum of 5 principals may be submitted.",
            "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/UpdatablePrincipal"
            }
          },
          "anticipatedTransAmounts": {
            "$ref": "#/components/schemas/UpdatableAnticipatedTransAmounts"
          },
          "bankingDetails": {
            "$ref": "#/components/schemas/UpdatableBankingDetails"
          },
          "businessProfile": {
            "$ref": "#/components/schemas/UpdatableBusinessProfile"
          },
          "mcc": {
            "type": "array",
            "items": {
              "type": "number",
              "maxLength": 4
            },
            "description": "The business classification drives the MCC selection. Prohibited or high-risk MCC codes are identified by Exact and are marked accordingly. Prohibited accounts are immediately declined while onboarding.",
            "example": [
              1771,
              1761
            ]
          }
        }
      },
      "UpdatableAnticipatedTransAmounts": {
        "type": "object",
        "properties": {
          "averageTicketSize": {
            "type": "number",
            "description": "Average Ticket Size",
            "example": 750
          },
          "maxTicketSize": {
            "type": "number",
            "description": "Max Ticket Size",
            "example": 100
          },
          "anticipatedMonthlyVolume": {
            "type": "number",
            "description": "Anticipated Monthly Volume",
            "example": 50
          }
        }
      },
      "UpdatableBankingDetails": {
        "type": "object",
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Bank Name",
            "example": "My Bank"
          },
          "routingNumber": {
            "type": "string",
            "description": "Routing Number",
            "example": 55443321
          },
          "ddaNumber": {
            "type": "string",
            "description": "DDA number",
            "example": 223334456
          },
          "bankNumber": {
            "type": "string",
            "description": "Bank number",
            "example": 1234567890
          }
        }
      },
      "UpdatableBusinessProfile": {
        "type": "object",
        "properties": {
          "servicesDescription": {
            "type": "string",
            "description": "Services description",
            "example": "Services description"
          },
          "currentlyAcceptingPayments": {
            "type": "boolean",
            "description": "If yes, currentProcessor, currentGateway and reasonForLeaving are required",
            "example": true
          },
          "currentProcessor": {
            "type": "string",
            "description": "Current Processor",
            "example": "FirstData"
          },
          "currentGateway": {
            "type": "string",
            "description": "Current gateway",
            "example": "FirstData"
          },
          "reasonForLeaving": {
            "type": "string",
            "description": "Reason for leaving",
            "example": "Does not match expectations"
          },
          "acceptanceMethods": {
            "$ref": "#/components/schemas/UpdatableAcceptanceMethods"
          },
          "recurringServices": {
            "type": "boolean",
            "description": "If yes, recurringServicesDescription is required",
            "example": true
          },
          "recurringServicesDescription": {
            "type": "string",
            "description": "Recurring Services description",
            "example": "Recurring Services description"
          },
          "refundPolicyDescription": {
            "type": "string",
            "description": "Refund policy",
            "example": "Refund policy"
          },
          "paymentTime": {
            "type": "string",
            "description": "Possible values 'Upon Purchase' | 'Upon Download' | 'At Time of Delivery' or any other",
            "example": "Upon Purchase"
          },
          "deliveryTimeframe": {
            "type": "string",
            "description": "Delivery time frame that the merchant have for its products",
            "enum": [
              "Immediate",
              "Within 7 days",
              "Within 14 days",
              "Within 30+ days"
            ],
            "example": "Immediate"
          }
        }
      },
      "UpdatableAcceptanceMethods": {
        "type": "object",
        "properties": {
          "moto": {
            "type": "number",
            "example": 25
          },
          "internet": {
            "type": "number",
            "example": 25
          },
          "swipe": {
            "type": "number",
            "example": 25
          },
          "keyed": {
            "type": "number",
            "example": 25
          }
        }
      },
      "UpdatableAddress": {
        "type": "object",
        "properties": {
          "line1": {
            "type": "string",
            "description": "The address for the merchant location. Usually includes street name.",
            "example": "Main AVENUE 42"
          },
          "line2": {
            "type": "string",
            "description": "Used to specify more information about the merchant location. This is optional",
            "example": "42-59B Building A"
          },
          "city": {
            "type": "string",
            "description": "The name of the city for a merchant location.",
            "example": "PHOENIX"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code for a merchant location (only supported for US and Canada merchants).",
            "example": 85008
          },
          "country": {
            "type": "string",
            "maxLength": 3,
            "description": "The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1.",
            "example": "USA"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "The three digit country subdivision code values are Three digit alpha country codes as defined in ISO 3166-1.",
            "example": "AZ"
          }
        }
      },
      "UpdatablePrincipal": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the principal owner of the business.",
            "example": "Justin"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the principal owner of the business.",
            "example": "Williams"
          },
          "title": {
            "$ref": "#/components/schemas/TitleValues"
          },
          "telephone": {
            "type": "string",
            "example": 2255441120
          },
          "email": {
            "type": "string",
            "example": "email@principal.com"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1990-07-21"
          },
          "driversLicense": {
            "type": "string",
            "example": "M15698025"
          },
          "driversLicenseState": {
            "type": "string",
            "example": "IL"
          },
          "ssn": {
            "type": "string",
            "description": "Social Security Number",
            "example": 756755675
          },
          "percentOfOwnership": {
            "type": "number",
            "example": 50
          },
          "address": {
            "$ref": "#/components/schemas/UpdatableAddress"
          }
        }
      },
      "UpdatableWebhookRequest": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebhookEventField"
          },
          "urls": {
            "$ref": "#/components/schemas/WebhookUrlsField"
          },
          "description": {
            "$ref": "#/components/schemas/WebhookDescriptionField"
          }
        }
      },
      "UpdateOnboardingStatusRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "inProgress",
              "withdrawn",
              "pended",
              "approved",
              "declined",
              "accountClosed",
              "reviewNeeded",
              "inRiskReview",
              "terminated"
            ]
          },
          "statusChangeReason": {
            "type": "string",
            "enum": [
              "Credit Worthiness",
              "Failed to Verify Identity",
              "Fraud",
              "General Risk Concern",
              "Prohibited Merchant",
              "Other"
            ]
          },
          "statusChangeReasonNote": {
            "type": "string"
          },
          "isDeleted": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "UsersResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The user's Id",
            "example": "61a78fe82c3156b0945ef135"
          },
          "id": {
            "type": "string",
            "description": "The user's Id",
            "example": "61a78fe82c3156b0945ef135"
          },
          "roles": {
            "type": "array",
            "description": "The user's roles",
            "items": {
              "type": "string"
            },
            "example": [
              "61a78fe82c3156b0945ef135"
            ]
          },
          "email": {
            "type": "string",
            "description": "The user's email",
            "example": "example@email.com"
          },
          "phone": {
            "type": "string",
            "description": "The user's phone 10 digits number",
            "example": 1111111111
          },
          "account": {
            "type": "string",
            "description": "The account's ID that the user belongs to",
            "example": "61a78fe82c3156b0945ef135"
          },
          "name": {
            "type": "string",
            "description": "The user's name",
            "example": "test user"
          },
          "createdAt": {
            "type": "string",
            "description": "The user's creation date",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The user's last update date",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "userCredential": {
            "type": "string",
            "description": "The users's id credential",
            "example": "61a78fe82c3156b0945ef135"
          },
          "lastAccessAt": {
            "type": "string",
            "description": "The user's last access date",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Shows if the user is disabled or not",
            "example": false
          }
        }
      },
      "UserAccountSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Alicia"
          },
          "roles": {
            "type": "array",
            "example": [
              "61a78fe82c3156b0945ef135"
            ],
            "items": {
              "type": "string"
            }
          },
          "permission": {
            "example": [
              "users.read",
              "onboarding-document-requests.create",
              "charges.read"
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEnum"
            }
          },
          "email": {
            "type": "string",
            "example": "someone@test.com"
          },
          "phone": {
            "type": "string",
            "example": 111111
          }
        }
      },
      "WebhookRequest": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebhookEventField"
          },
          "urls": {
            "$ref": "#/components/schemas/WebhookUrlsField"
          },
          "description": {
            "$ref": "#/components/schemas/WebhookDescriptionField"
          }
        },
        "required": [
          "event",
          "urls"
        ]
      },
      "WebhookResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "System generated identifier for the webhook definition.",
            "example": "61e8351bd569a19690052101"
          },
          "event": {
            "$ref": "#/components/schemas/WebhookEventField"
          },
          "urls": {
            "$ref": "#/components/schemas/WebhookUrlsField"
          },
          "description": {
            "$ref": "#/components/schemas/WebhookDescriptionField"
          },
          "account": {
            "type": "string",
            "description": "The ID of the Account that this Webhook belongs to.",
            "example": "61e0930df1d1ac62d5b781f0"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the webhook was created.",
            "format": "date-time",
            "example": "2022-01-19T15:05:18.262Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when the webhook was updated.",
            "format": "date-time",
            "example": "2022-01-19T15:05:18.262Z"
          },
          "disabledAt": {
            "type": "string"
          }
        },
        "required": [
          "event"
        ]
      },
      "WebhookDescriptionField": {
        "type": "string",
        "description": "Is a description of the purpose of this webhook definition, what the customer will use it for.",
        "example": "Completed reports for this account."
      },
      "WebhookEventField": {
        "description": "An event that the customer can subscribe to get notifications when it is generated in the system. The format of the event is resource.action:status, if no status is provided it will take finish as default.\n",
        "example": "report.run",
        "type": "string",
        "enum": [
          "report.create.start",
          "report.create.finish",
          "report.create.success",
          "report.create.failure",
          "report.query.start",
          "report.query.finish",
          "report.query.success",
          "report.query.failure",
          "report.download.start",
          "report.download.finish",
          "report.download.success",
          "report.download.failure",
          "report.run.start",
          "report.run.finish",
          "report.run.success",
          "report.run.failure",
          "payment.create.start",
          "payment.create.finish",
          "payment.create.success",
          "payment.create.failure",
          "payment.query.start",
          "payment.query.finish",
          "payment.query.success",
          "payment.query",
          "payment.get.start",
          "payment.get.finish",
          "payment.get.success",
          "payment.get.failure",
          "payment.settle.start",
          "payment.settle.finish",
          "payment.settle.success",
          "payment.settle.failure"
        ]
      },
      "WebhookUrlsField": {
        "type": "array",
        "description": "Is a list of urls in the customer side that will be invoked and notified once an event is triggered.",
        "items": {
          "type": "string",
          "example": [
            "https://736d1e71-c9ae-409b-81ff-c2c38c68ad4b.mock.pstmn.io/dev/hook/success",
            "https://736d1e71-c9ae-409b-81ff-c2c38c68ad4b.mock.pstmn.io/dev/hook/finished"
          ]
        }
      },
      "OnboardingDocumentRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "articles-of-incorporation",
              "bank-letter",
              "business-license",
              "passport",
              "utility-bill",
              "ss-4-form",
              "drivers-license",
              "other"
            ]
          },
          "documentRequest": {
            "type": "string"
          },
          "file": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "onboardingIsDeleted": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "UpdatableOnboardingDocument": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the document to be updated",
            "example": "drivers-license",
            "enum": [
              "articles-of-incorporation",
              "bank-letter",
              "business-license",
              "passport",
              "utility-bill",
              "ss-4-form",
              "drivers-license",
              "other"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "Customer": {
        "title": "Customer",
        "type": "object",
        "description": "In order to understand what a customer is in the context of this API we need to define the shape of our customer object. The following details the shape and fields involved.",
        "x-examples": {
          "example-1": {
            "id": "string",
            "name": "string",
            "email": "string",
            "phone": "string",
            "token": "string",
            "addresses": [
              {
                "label": "string",
                "city": "string",
                "country": "string",
                "line1": "string",
                "line2": "string",
                "postalCode": "string",
                "state": "string",
                "isDefault": true
              }
            ],
            "createdAt": "string",
            "updatedAt": "string"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the given user."
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "line1": {
                  "type": "string"
                },
                "line2": {
                  "type": "string"
                },
                "postalCode": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "isDefault": {
                  "type": "boolean"
                }
              }
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "NewCustomer": {
        "title": "New Customer",
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "line1": {
                  "type": "string"
                },
                "line2": {
                  "type": "string"
                },
                "postalCode": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "isDefault": {
                  "type": "boolean"
                }
              },
              "required": [
                "label"
              ]
            }
          }
        }
      },
      "BillingDetailsAddress": {
        "title": "Address",
        "type": "object",
        "required": [
          "line1",
          "city",
          "state",
          "country",
          "postalCode"
        ],
        "properties": {
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "LookUpCustomer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "customer"
          },
          "token": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          }
        }
      },
      "LookupNPaymentMethod": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          {
            "$ref": "#/components/schemas/LookUpCustomer"
          }
        ]
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "billingDetails": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "card": {
            "type": "object",
            "properties": {
              "expiry": {
                "type": "object",
                "properties": {
                  "month": {
                    "type": "integer"
                  },
                  "year": {
                    "type": "integer"
                  }
                }
              },
              "brand": {
                "type": "string"
              },
              "lastFour": {
                "type": "string"
              },
              "checks": {
                "type": "object",
                "properties": {
                  "cvcCheck": {
                    "type": "boolean"
                  },
                  "addressCheck": {
                    "type": "boolean"
                  }
                }
              },
              "tokenType": {
                "type": "string"
              }
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "isDefault": {
            "type": "string"
          },
          "ach": {
            "type": "object",
            "properties": {
              "bankAccountType": {
                "type": "string"
              }
            }
          }
        },
        "x-examples": {
          "example-1": {
            "type": "string",
            "token": "string",
            "billingDetails": {
              "name": "string",
              "email": "string",
              "phone": "string",
              "address": {
                "line1": "string",
                "line2": "string",
                "city": "string",
                "state": "string",
                "country": "string",
                "postalCode": "string"
              }
            },
            "card": {
              "expiry": {
                "month": 0,
                "year": 0
              },
              "brand": "string",
              "lastFour": "string",
              "checks": {
                "cvcCheck": true,
                "addressCheck": true
              },
              "tokenType": "string"
            },
            "createdAt": "string",
            "updatedAt": "string",
            "label": "string",
            "isDefault": "string",
            "ach": {
              "bankAccountType": "string"
            }
          }
        }
      },
      "NewPaymentMethod": {
        "title": "Payment Method",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardSchema"
          },
          {
            "$ref": "#/components/schemas/AchSchema"
          },
          {
            "$ref": "#/components/schemas/EftSchema"
          }
        ],
        "x-examples": {
          "example-1": {
            "type": "card",
            "billingDetails": {
              "name": "string",
              "email": "string",
              "phone": "string",
              "address": {
                "line1": "string",
                "line2": "string",
                "city": "string",
                "state": "string",
                "country": "string",
                "postalCode": "string"
              }
            },
            "card": {
              "number": "string",
              "cvc": "string",
              "expiry": {
                "month": 0,
                "year": 0
              },
              "tokenType": "gateway"
            }
          },
          "example-2": {
            "type": "string",
            "billingDetails": {
              "name": "string",
              "email": "string",
              "phone": "string",
              "address": {
                "line1": "string",
                "line2": "string",
                "city": "string",
                "state": "string",
                "country": "string",
                "postalCode": "string"
              }
            },
            "card": {
              "number": "string",
              "cvc": "string",
              "expiry": {
                "month": 0,
                "year": 0
              },
              "tokenType": "string"
            }
          }
        }
      },
      "Payment": {
        "title": "Payment",
        "oneOf": [
          {
            "properties": {
              "paymentId": {
                "type": "string"
              },
              "accountId": {
                "type": "string"
              },
              "approved": {
                "type": "boolean"
              },
              "captured": {
                "type": "boolean"
              },
              "captureDetails": {
                "type": "object",
                "properties": {
                  "captures": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remaining": {
                    "type": "number"
                  }
                }
              },
              "voided": {
                "type": "boolean"
              },
              "voidDetails": {
                "type": "object",
                "properties": {
                  "voids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "refunded": {
                "type": "boolean"
              },
              "refundDetails": {
                "type": "object",
                "properties": {
                  "refunds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remaining": {
                    "type": "number"
                  }
                }
              },
              "settled": {
                "type": "boolean"
              },
              "settledAt": {
                "type": "string"
              },
              "authorization": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "feeAmount": {
                "type": "number"
              },
              "surchargeAmount": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              },
              "sentToBank": {
                "type": "boolean"
              },
              "bankResponse": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "exactResponse": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "terminal": {
                "type": "object",
                "properties": {
                  "gatewayId": {
                    "type": "string"
                  }
                }
              },
              "merchant": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string"
                      },
                      "line2": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "countryCode": {
                        "type": "string"
                      }
                    }
                  },
                  "url": {
                    "type": "string"
                  }
                }
              },
              "receipt": {
                "type": "string"
              },
              "paymentMethodDetails": {
                "oneOf": [
                  {
                    "properties": {
                      "cardholder": {
                        "type": "string"
                      },
                      "last4": {
                        "type": "string"
                      },
                      "expiryMonth": {
                        "type": "string"
                      },
                      "expiryYear": {
                        "type": "string"
                      },
                      "cardBrand": {
                        "type": "string"
                      },
                      "avsCheck": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      },
                      "cvdCheck": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  {
                    "properties": {
                      "token": {
                        "type": "string"
                      },
                      "tokenType": {
                        "type": "string",
                        "enum": [
                          "exactpay",
                          "processor"
                        ]
                      },
                      "cardBrand": {
                        "type": "string"
                      },
                      "cardholder": {
                        "type": "string"
                      },
                      "last4": {
                        "type": "string"
                      },
                      "expiryMonth": {
                        "type": "string"
                      },
                      "expiryYear": {
                        "type": "string"
                      },
                      "cvdCheck": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                ],
                "type": "object"
              },
              "options": {
                "type": "object",
                "properties": {
                  "orderTrackingNumber": {
                    "type": "string"
                  },
                  "fraudSuspected": {
                    "type": "string"
                  },
                  "ecommerceFlag": {
                    "type": "string"
                  },
                  "thirdPartyId": {
                    "type": "string"
                  },
                  "specialPayment": {
                    "type": "string"
                  },
                  "aftTransferType": {
                    "type": "string"
                  },
                  "customerIp": {
                    "type": "string"
                  },
                  "generateReceipt": {
                    "type": "boolean"
                  },
                  "splitShipmentNumber": {
                    "type": "string"
                  },
                  "installmentNumber": {
                    "type": "string"
                  }
                }
              },
              "createdAt": {
                "type": "string"
              }
            }
          },
          {
            "properties": {
              "paymentId": {
                "type": "string"
              },
              "accountId": {
                "type": "string"
              },
              "approved": {
                "type": "boolean"
              },
              "captured": {
                "type": "boolean"
              },
              "voided": {
                "type": "boolean"
              },
              "voidDetails": {
                "type": "object",
                "properties": {
                  "voids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "refunded": {
                "type": "boolean"
              },
              "settled": {
                "type": "boolean"
              },
              "settledAt": {
                "type": "string"
              },
              "authorization": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              },
              "currencyCode": {
                "type": "string"
              },
              "sentToBank": {
                "type": "boolean"
              },
              "bankResponse": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              },
              "ach": {
                "type": "object",
                "properties": {
                  "clearing": {
                    "type": "string"
                  }
                }
              },
              "createdAt": {
                "type": "string"
              }
            }
          }
        ],
        "type": "object"
      },
      "NewPayment": {
        "title": "NewPayment",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "feeAmount": {
            "type": "number"
          },
          "surchargeAmount": {
            "type": "number"
          },
          "capture": {
            "type": "boolean"
          },
          "language": {
            "type": "string",
            "enum": [
              "en",
              "es"
            ]
          },
          "terminal": {
            "type": "object",
            "properties": {
              "gatewayId": {
                "type": "string"
              }
            }
          },
          "paymentMethod": {
            "oneOf": [
              {
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "creditCard": {
                    "type": "object",
                    "properties": {
                      "cardholder": {
                        "type": "string"
                      },
                      "number": {
                        "type": "string"
                      },
                      "expiryMonth": {
                        "type": "string"
                      },
                      "expiryYear": {
                        "type": "string"
                      },
                      "cvd": {
                        "type": "string"
                      },
                      "cvdIndicator": {
                        "type": "number",
                        "enum": [
                          0,
                          1,
                          2,
                          9
                        ]
                      }
                    },
                    "required": [
                      "cardholder",
                      "number",
                      "expiryMonth",
                      "expiryYear"
                    ]
                  }
                }
              }
            ],
            "type": "object"
          },
          "customer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Required if it is a network token"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "phoneType": {
                "type": "string",
                "enum": [
                  "H",
                  "W",
                  "D",
                  "N"
                ]
              },
              "address": {
                "type": "object",
                "properties": {
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "countryCode": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "reference": {
            "type": "object",
            "properties": {
              "customerRef": {
                "type": "string"
              },
              "referenceNo": {
                "type": "string"
              },
              "reference3": {
                "type": "string"
              },
              "correlationId": {
                "type": "string"
              }
            }
          },
          "storedCredentials": {
            "type": "object",
            "properties": {
              "indicator": {
                "type": "string"
              },
              "initiation": {
                "type": "string"
              },
              "schedule": {
                "type": "string"
              },
              "authorizationTypeOverride": {
                "type": "string"
              },
              "transactionId": {
                "type": "string"
              },
              "protectbuyIndicator": {
                "type": "string"
              },
              "originalAmount": {
                "type": "number"
              }
            }
          },
          "softDescriptor": {
            "type": "object",
            "properties": {
              "dbaName": {
                "type": "string"
              },
              "street": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              },
              "countryCode": {
                "type": "string"
              },
              "mid": {
                "type": "string"
              },
              "mcc": {
                "type": "string"
              },
              "merchantContactInfo": {
                "type": "string"
              },
              "paymentFacilitator": {
                "type": "object",
                "properties": {
                  "mvvMaid": {
                    "type": "string"
                  },
                  "merchantPhone": {
                    "type": "string"
                  },
                  "merchantEmail": {
                    "type": "string"
                  },
                  "submerchantId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "level2": {
            "type": "object",
            "properties": {
              "tax1Amount": {
                "type": "number"
              },
              "tax1Number": {
                "type": "string"
              },
              "tax2Amount": {
                "type": "number"
              },
              "tax2Number": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              }
            }
          },
          "level3": {
            "type": "object",
            "properties": {
              "taxAmount": {
                "type": "number"
              },
              "taxRate": {
                "type": "number"
              },
              "altTaxAmount": {
                "type": "number"
              },
              "altTaxId": {
                "type": "string"
              },
              "dutyAmount": {
                "type": "number"
              },
              "freightAmount": {
                "type": "number"
              },
              "discountAmount": {
                "type": "number"
              },
              "shipFromZip": {
                "type": "string"
              },
              "shipTo": {
                "type": "object",
                "properties": {
                  "customerNumber": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "phoneType": {
                    "type": "string",
                    "enum": [
                      "H",
                      "W",
                      "D",
                      "N"
                    ]
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string"
                      },
                      "line2": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "countryCode": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "line1",
                      "postalCode"
                    ]
                  }
                }
              },
              "lineItems": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "commodityCode": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "discountAmount": {
                      "type": "string"
                    },
                    "discountIndicator": {
                      "type": "string"
                    },
                    "grossNetIndicator": {
                      "type": "string"
                    },
                    "lineItemTotal": {
                      "type": "number"
                    },
                    "productCode": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "taxAmount": {
                      "type": "string"
                    },
                    "taxRate": {
                      "type": "string"
                    },
                    "unitCost": {
                      "type": "number"
                    },
                    "unitOfMeasure": {
                      "type": "string"
                    },
                    "taxType": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "threeDSecure": {
            "type": "object",
            "properties": {
              "programProtocol": {
                "type": "number",
                "enum": [
                  1,
                  2
                ]
              },
              "directoryServerTransactionId": {
                "type": "string"
              },
              "cavv": {
                "type": "string"
              },
              "xid": {
                "type": "string"
              }
            }
          },
          "options": {
            "type": "object",
            "properties": {
              "orderTrackingNumber": {
                "type": "string"
              },
              "fraudSuspected": {
                "type": "string"
              },
              "ecommerceFlag": {
                "type": "string",
                "enum": [
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "R",
                  "I",
                  "X"
                ]
              },
              "thirdPartyId": {
                "type": "string"
              },
              "splitShipmentNumber": {
                "type": "string"
              },
              "specialPayment": {
                "type": "string"
              },
              "aftTransferType": {
                "type": "string",
                "enum": [
                  "AA",
                  "BI",
                  "PP",
                  "TU",
                  "WT"
                ]
              },
              "customerIp": {
                "type": "string"
              },
              "generateReceipt": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "amount",
          "paymentMethod"
        ],
        "description": ""
      },
      "DocumentResponse": {
        "title": "DocumentResponse",
        "x-stoplight": {
          "id": "tztncifsclfhp"
        },
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "file": {
            "type": "string"
          },
          "ext": {
            "type": "string"
          },
          "mime": {
            "type": "string"
          },
          "onboarding": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "PermissionEnum": {
        "type": "string",
        "title": "PermissionEnum",
        "x-stoplight": {
          "id": "vlgy6u30awkro"
        },
        "x-examples": {
          "example-1": {
            "": "string"
          }
        },
        "enum": [
          "users.read",
          "users.update",
          "users.delete",
          "users.disable",
          "users.set-permissions",
          "users.prox",
          "organization-invites.create",
          "organization-invites.read",
          "organization-invites.delete",
          "account-invites.create",
          "account-invites.read",
          "account-invites.delete",
          "organizations.create",
          "organizations.read",
          "organizations.update",
          "organizations.delete",
          "organizations.disable",
          "organizations.transfer",
          "accounts.create",
          "accounts.read",
          "accounts.update",
          "accounts.delete",
          "accounts.disable",
          "accounts.transfer",
          "applications.create",
          "applications.read",
          "applications.update",
          "applications.delete",
          "application-tokens.create",
          "application-tokens.read",
          "application-tokens.delete",
          "templates.set",
          "templates.unset",
          "roles.create",
          "roles.read",
          "roles.update",
          "roles.delete",
          "onboardings.read",
          "onboardings.update",
          "onboardings.delete",
          "onboarding-documents-requests.create",
          "onboarding-document-requests.read",
          "onboarding-documents.create",
          "onboarding-documents.update",
          "onboarding-documents.read",
          "onboarding-documents.delete",
          "onboarding-notes.create",
          "onboarding-notes.read",
          "onboarding-workflows.create",
          "onboarding-workflows.read",
          "onboarding-workflows.update",
          "onboarding-workflows.delete",
          "plans.create",
          "plans.read",
          "plans.delete",
          "plans.update",
          "subscriptions.create",
          "subscriptions.read",
          "subscriptions.delete",
          "subscriptions.update",
          "customers.create",
          "customers.read",
          "customers.update",
          "customers.delete",
          "reports.create",
          "reports.read",
          "reports.update",
          "reports.delete",
          "events.read",
          "webhooks.create",
          "webhooks.read",
          "webhooks.update",
          "webhooks.delete",
          "charges.create",
          "chargebacks.read"
        ]
      },
      "CardSchema": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "type": "card",
            "billingDetails": {
              "name": "string",
              "email": "string",
              "phone": "string",
              "address": {
                "line1": "string",
                "line2": "string",
                "city": "string",
                "state": "string",
                "country": "string",
                "postalCode": "string"
              }
            },
            "card": {
              "number": "string",
              "cvc": "string",
              "expiry": {
                "month": 0,
                "year": 0
              },
              "tokenType": "gateway"
            }
          }
        },
        "title": "",
        "properties": {
          "type": {
            "type": "string"
          },
          "billingDetails": {
            "type": "object",
            "required": [
              "name",
              "address"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "required": [
                  "line1",
                  "city",
                  "state",
                  "country",
                  "postalCode"
                ],
                "properties": {
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "card": {
            "type": "object",
            "required": [
              "number",
              "expiry"
            ],
            "properties": {
              "number": {
                "type": "string"
              },
              "cvc": {
                "type": "string"
              },
              "expiry": {
                "type": "object",
                "required": [
                  "month",
                  "year"
                ],
                "properties": {
                  "month": {
                    "type": "integer"
                  },
                  "year": {
                    "type": "integer"
                  }
                }
              },
              "tokenType": {
                "type": "string"
              },
              "cvcIndicator": {
                "type": "string",
                "enum": [
                  "present",
                  "not-present",
                  "illegible"
                ]
              }
            }
          }
        },
        "required": [
          "type",
          "billingDetails",
          "card"
        ]
      },
      "AchSchema": {
        "title": "AchSchema",
        "x-stoplight": {
          "id": "85pfg4n8pjmwq"
        },
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "billingDetails": {
            "type": "object",
            "required": [
              "name",
              "address"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "address": {
                "$ref": "#/components/schemas/BillingDetailsAddress"
              }
            }
          },
          "ach": {
            "type": "object",
            "required": [
              "routingNumber",
              "accountNumber",
              "bankAccountType"
            ],
            "properties": {
              "plaidToken": {
                "type": "string"
              },
              "routingNumber": {
                "type": "string"
              },
              "accountNumber": {
                "type": "string"
              },
              "bankAccountType": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "type",
          "billingDetails",
          "ach"
        ]
      },
      "EftSchema": {
        "title": "EftSchema",
        "x-stoplight": {
          "id": "nesxtapl5n2v6"
        },
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "billingDetails": {
            "type": "object",
            "required": [
              "name",
              "address"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "address": {
                "$ref": "#/components/schemas/BillingDetailsAddress"
              }
            }
          },
          "eft": {
            "type": "object",
            "required": [
              "institutionNumber",
              "accountNumber",
              "transitNumber"
            ],
            "properties": {
              "institutionNumber": {
                "type": "string"
              },
              "accountNumber": {
                "type": "string"
              },
              "transitNumber": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "type",
          "billingDetails",
          "eft"
        ]
      },
      "OnboardingSearchSchema": {
        "title": "OnboardingSearchSchema",
        "x-stoplight": {
          "id": "llgs9fmjp35gx"
        },
        "type": "object",
        "properties": {
          " ": {
            "$ref": "#/components/schemas/OnboardingResponse"
          },
          "documentRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnboardingDocumentRequest"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentSchema"
            }
          }
        }
      },
      "DocumentSchema": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "file": {
            "type": "string"
          },
          "ext": {
            "type": "string"
          },
          "mime": {
            "type": "string"
          },
          "onboarding": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "__v": {
            "type": "integer"
          }
        },
        "x-examples": {
          "example-1": {
            "_id": "630fc301d369f04b977b0add",
            "name": "Update 2",
            "type": "other",
            "file": "630e37e8e8495640618df933/other-file.png",
            "ext": "png",
            "mime": "image/png",
            "onboarding": "630e37e8e8495640618df933",
            "createdAt": "2022-08-31T20:22:25.276Z",
            "updatedAt": "2022-08-31T20:22:25.276Z",
            "__v": 0
          }
        }
      },
      "ReferencedPayment": {
        "title": "ReferencedPayment",
        "x-stoplight": {
          "id": "18k76hh0qr4bd"
        },
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Amount in smallest currency unit, eg: cents, including all\n            surcharges, taxes etc.",
            "format": "int32",
            "minimum": 0,
            "maximum": 999999999
          }
        }
      }
    },
    "examples": {
      "UnderwritingWorkflowRequestAllRulesExample": {
        "summary": "Request to create a new Underwriting workflow including all rules",
        "value": {
          "name": "All rules workflow",
          "entryRule": "Plaid Identity",
          "rules": [
            {
              "name": "Plaid Identity",
              "type": "Plaid Identity",
              "options": {},
              "onPass": "Plaid Auth",
              "onFail": "accept"
            },
            {
              "name": "Plaid Auth",
              "type": "Plaid Auth",
              "options": {},
              "onPass": "Plaid Balance",
              "onFail": "accept"
            },
            {
              "name": "Plaid Balance",
              "type": "Plaid Balance",
              "options": {
                "minimumBalance": 10
              },
              "onPass": "High Risk MCC",
              "onFail": "review"
            },
            {
              "name": "High Risk MCC",
              "type": "Business Information",
              "options": [
                {
                  "field": "merchant.mcc",
                  "operator": "in",
                  "value1": [
                    "4411",
                    "6050"
                  ]
                }
              ],
              "onPass": "reject",
              "onFail": "Medium Risk MCC"
            },
            {
              "name": "Medium Risk MCC",
              "type": "Business Information",
              "options": [
                {
                  "field": "merchant.mcc",
                  "operator": "in",
                  "value1": [
                    "9700",
                    "9701",
                    "9702"
                  ]
                }
              ],
              "onPass": "Medium Risk Trulioo KYB",
              "onFail": "Low Risk MCC"
            },
            {
              "name": "Low Risk MCC",
              "type": "Business Information",
              "options": [
                {
                  "field": "merchant.mcc",
                  "operator": "in",
                  "value1": [
                    "7542"
                  ]
                }
              ],
              "onPass": "review",
              "onFail": "Low Risk Acceptable Delivery"
            },
            {
              "name": "Medium Risk Trulioo KYB",
              "type": "Trulioo KYB",
              "options": {},
              "onPass": "review",
              "onFail": "Medium Risk Trulioo KYC"
            },
            {
              "name": "Medium Risk Trulioo KYC",
              "type": "Trulioo KYC",
              "options": {},
              "onPass": "Medium Risk Trulioo International Watchlist",
              "onFail": "review"
            },
            {
              "name": "Medium Risk Trulioo International Watchlist",
              "type": "Trulioo International Watchlist",
              "options": {},
              "onPass": "reject",
              "onFail": "Medium Risk OFAC"
            },
            {
              "name": "Medium Risk OFAC",
              "type": "OFAC",
              "options": {
                "min": 5,
                "max": 100
              },
              "onPass": "Medium Risk Mastercard Match",
              "onFail": "review"
            },
            {
              "name": "Medium Risk Mastercard Match",
              "type": "Mastercard Match",
              "options": {
                "merchant": {
                  "Name": [
                    "M00"
                  ]
                },
                "principal": {
                  "Name": [
                    "M00"
                  ]
                }
              },
              "onPass": "review",
              "onFail": "reject"
            },
            {
              "name": "Low Risk Acceptable Delivery",
              "type": "Business Information",
              "options": [
                {
                  "field": "merchant.businessProfile.deliveryTimeframe",
                  "operator": "in",
                  "value1": [
                    "Within 7 days"
                  ]
                }
              ],
              "onPass": "Low Risk Low Volume",
              "onFail": "reject"
            },
            {
              "name": "Low Risk Low Volume",
              "type": "Business Information",
              "options": [
                {
                  "field": "merchant.anticipatedTransAmounts.anticipatedMonthlyVolume",
                  "operator": "between",
                  "value1": 500,
                  "value2": 20000
                },
                {
                  "field": "merchant.anticipatedTransAmounts.averageTicketSize",
                  "operator": "between",
                  "value1": 5,
                  "value2": 500
                }
              ],
              "onPass": "accept",
              "onFail": "review"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestBusinessInformationExample": {
        "summary": "Request to create a new Underwriting Workflow Request using Business Information",
        "value": {
          "name": "Business Information workflow",
          "entryRule": "Business Rule",
          "rules": [
            {
              "name": "Business Rule",
              "type": "Business Information",
              "options": [
                {
                  "field": "merchant.mcc",
                  "operator": "in",
                  "value1": [
                    "4411",
                    "6050"
                  ]
                },
                {
                  "field": "merchant.businessProfile.deliveryTimeframe",
                  "operator": "in",
                  "value1": [
                    "Within 7 days"
                  ]
                },
                {
                  "field": "merchant.anticipatedTransAmounts.anticipatedMonthlyVolume",
                  "operator": "between",
                  "value1": 500,
                  "value2": 20000
                },
                {
                  "field": "merchant.anticipatedTransAmounts.averageTicketSize",
                  "operator": "between",
                  "value1": 5,
                  "value2": 500
                },
                {
                  "field": "merchant.principal.address.city",
                  "operator": "eq",
                  "value1": "San Francisco"
                }
              ],
              "onPass": "reject",
              "onFail": "accept"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestMastercardMatchExample": {
        "summary": "Request to create a new Underwriting Workflow Request using Mastercard Match",
        "value": {
          "name": "Mastercard workflow",
          "entryRule": "Medium Risk Mastercard Match",
          "rules": [
            {
              "name": "Medium Risk Mastercard Match",
              "type": "Mastercard Match",
              "options": {
                "merchant": {
                  "Name": [
                    "M00"
                  ]
                },
                "principal": {
                  "Name": [
                    "M00"
                  ]
                }
              },
              "onPass": "review",
              "onFail": "reject"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestOFACExample": {
        "summary": "Request to create a new Underwriting Workflow using OFAC",
        "value": {
          "name": "OFAC workflow",
          "entryRule": "Medium Risk OFAC",
          "rules": [
            {
              "name": "Medium Risk OFAC",
              "type": "OFAC",
              "options": {
                "min": 5,
                "max": 100
              },
              "onPass": "accept",
              "onFail": "review"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestPlaidAuthExample": {
        "summary": "Request to create a new Underwriting Workflow using Plaid Auth",
        "value": {
          "name": "Plaid Auth workflow",
          "entryRule": "Plaid Auth",
          "rules": [
            {
              "name": "Plaid Auth",
              "type": "Plaid Auth",
              "options": {},
              "onPass": "accept",
              "onFail": "accept"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestPlaidBalanceExample": {
        "summary": "Request to create a new Underwriting Workflow using Plaid Balance",
        "value": {
          "name": "Plaid Balance workflow",
          "entryRule": "Plaid Balance",
          "rules": [
            {
              "name": "Plaid Balance",
              "type": "Plaid Balance",
              "options": {
                "minimumBalance": 10
              },
              "onPass": "reject",
              "onFail": "review"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestPlaidIdentityExample": {
        "summary": "Request to create a new Underwriting Workflow using Plaid Identity",
        "value": {
          "name": "Plaid Identity workflow",
          "entryRule": "Plaid Identity",
          "rules": [
            {
              "name": "Plaid Identity",
              "type": "Plaid Identity",
              "options": {},
              "onPass": "accept",
              "onFail": "accept"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestTruliooInternationalWatchlistExample": {
        "summary": "Request to create a new Underwriting Workflow using Trulioo International Watchlist",
        "value": {
          "name": "International Watchlist workflow",
          "entryRule": "Medium Risk Trulioo International Watchlist",
          "rules": [
            {
              "name": "Medium Risk Trulioo International Watchlist",
              "type": "Trulioo International Watchlist",
              "options": {},
              "onPass": "reject",
              "onFail": "accept"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestTruliooKYBExample": {
        "summary": "Request to create a new Underwriting Workflow using Trulioo KYB",
        "value": {
          "name": "KYB workflow",
          "entryRule": "Medium Risk Trulioo KYB",
          "rules": [
            {
              "name": "Medium Risk Trulioo KYB",
              "type": "Trulioo KYB",
              "options": {},
              "onPass": "review",
              "onFail": "accept"
            }
          ]
        }
      },
      "UnderwritingWorkflowRequestTruliooKYCExample": {
        "summary": "Request to create a new Underwriting Workflow using Trulioo KYC",
        "value": {
          "name": "KYC workflow",
          "entryRule": "Medium Risk Trulioo KYC",
          "rules": [
            {
              "name": "Medium Risk Trulioo KYC",
              "type": "Trulioo KYC",
              "options": {},
              "onPass": "accept",
              "onFail": "reject"
            }
          ]
        }
      }
    }
  },
  "x-extension-2": null,
  "x-extension-3": null
}